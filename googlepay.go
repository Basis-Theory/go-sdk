// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/internal"
)

type GooglePayTokenizeRequest struct {
	GooglePaymentMethodToken *GooglePaymentMethodToken `json:"google_payment_method_token,omitempty" url:"-"`
}

type GooglePayTokenizeResponse struct {
	TokenIntent *CreateTokenIntentResponse `json:"token_intent,omitempty" url:"token_intent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayTokenizeResponse) GetTokenIntent() *CreateTokenIntentResponse {
	if g == nil {
		return nil
	}
	return g.TokenIntent
}

func (g *GooglePayTokenizeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayTokenizeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayTokenizeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayTokenizeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayTokenizeResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GooglePaymentMethodToken struct {
	ProtocolVersion        *string                 `json:"protocolVersion,omitempty" url:"protocolVersion,omitempty"`
	Signature              *string                 `json:"signature,omitempty" url:"signature,omitempty"`
	IntermediateSigningKey *IntermediateSigningKey `json:"intermediateSigningKey,omitempty" url:"intermediateSigningKey,omitempty"`
	SignedMessage          *string                 `json:"signedMessage,omitempty" url:"signedMessage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePaymentMethodToken) GetProtocolVersion() *string {
	if g == nil {
		return nil
	}
	return g.ProtocolVersion
}

func (g *GooglePaymentMethodToken) GetSignature() *string {
	if g == nil {
		return nil
	}
	return g.Signature
}

func (g *GooglePaymentMethodToken) GetIntermediateSigningKey() *IntermediateSigningKey {
	if g == nil {
		return nil
	}
	return g.IntermediateSigningKey
}

func (g *GooglePaymentMethodToken) GetSignedMessage() *string {
	if g == nil {
		return nil
	}
	return g.SignedMessage
}

func (g *GooglePaymentMethodToken) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePaymentMethodToken) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePaymentMethodToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePaymentMethodToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePaymentMethodToken) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type IntermediateSigningKey struct {
	SignedKey  *string  `json:"signedKey,omitempty" url:"signedKey,omitempty"`
	Signatures []string `json:"signatures,omitempty" url:"signatures,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntermediateSigningKey) GetSignedKey() *string {
	if i == nil {
		return nil
	}
	return i.SignedKey
}

func (i *IntermediateSigningKey) GetSignatures() []string {
	if i == nil {
		return nil
	}
	return i.Signatures
}

func (i *IntermediateSigningKey) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntermediateSigningKey) UnmarshalJSON(data []byte) error {
	type unmarshaler IntermediateSigningKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntermediateSigningKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntermediateSigningKey) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}
