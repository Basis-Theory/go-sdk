// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/internal"
	time "time"
)

type AccessRule struct {
	Description *string      `json:"description,omitempty" url:"description,omitempty"`
	Priority    *int         `json:"priority,omitempty" url:"priority,omitempty"`
	Container   *string      `json:"container,omitempty" url:"container,omitempty"`
	Transform   *string      `json:"transform,omitempty" url:"transform,omitempty"`
	Conditions  []*Condition `json:"conditions,omitempty" url:"conditions,omitempty"`
	Permissions []string     `json:"permissions,omitempty" url:"permissions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessRule) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AccessRule) GetPriority() *int {
	if a == nil {
		return nil
	}
	return a.Priority
}

func (a *AccessRule) GetContainer() *string {
	if a == nil {
		return nil
	}
	return a.Container
}

func (a *AccessRule) GetTransform() *string {
	if a == nil {
		return nil
	}
	return a.Transform
}

func (a *AccessRule) GetConditions() []*Condition {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AccessRule) GetPermissions() []string {
	if a == nil {
		return nil
	}
	return a.Permissions
}

func (a *AccessRule) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessRule) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessRule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessRule) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountUpdaterJob struct {
	ID       string `json:"id" url:"id"`
	TenantID string `json:"tenantId" url:"tenantId"`
	// The current status of the job
	Status AccountUpdaterJobStatus `json:"status" url:"status"`
	// Pre-signed URL for uploading job data
	UploadURL string `json:"uploadUrl" url:"uploadUrl"`
	// Application id that created the job
	CreatedBy string `json:"createdBy" url:"createdBy"`
	// Date and time when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// Date and time when the job expires if no data is uploaded
	ExpiresAt *time.Time `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`
	// List of errors encountered during processing
	Errors []string `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountUpdaterJob) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AccountUpdaterJob) GetTenantID() string {
	if a == nil {
		return ""
	}
	return a.TenantID
}

func (a *AccountUpdaterJob) GetStatus() AccountUpdaterJobStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AccountUpdaterJob) GetUploadURL() string {
	if a == nil {
		return ""
	}
	return a.UploadURL
}

func (a *AccountUpdaterJob) GetCreatedBy() string {
	if a == nil {
		return ""
	}
	return a.CreatedBy
}

func (a *AccountUpdaterJob) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *AccountUpdaterJob) GetExpiresAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ExpiresAt
}

func (a *AccountUpdaterJob) GetErrors() []string {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *AccountUpdaterJob) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountUpdaterJob) UnmarshalJSON(data []byte) error {
	type embed AccountUpdaterJob
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccountUpdaterJob(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountUpdaterJob) MarshalJSON() ([]byte, error) {
	type embed AccountUpdaterJob
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewDateTime(a.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(a.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (a *AccountUpdaterJob) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountUpdaterJobList struct {
	Pagination *AccountUpdaterJobListPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*AccountUpdaterJob             `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountUpdaterJobList) GetPagination() *AccountUpdaterJobListPagination {
	if a == nil {
		return nil
	}
	return a.Pagination
}

func (a *AccountUpdaterJobList) GetData() []*AccountUpdaterJob {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountUpdaterJobList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountUpdaterJobList) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountUpdaterJobList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountUpdaterJobList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountUpdaterJobList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountUpdaterJobListPagination struct {
	PageSize *int    `json:"page_size,omitempty" url:"page_size,omitempty"`
	Next     *string `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountUpdaterJobListPagination) GetPageSize() *int {
	if a == nil {
		return nil
	}
	return a.PageSize
}

func (a *AccountUpdaterJobListPagination) GetNext() *string {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AccountUpdaterJobListPagination) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountUpdaterJobListPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountUpdaterJobListPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountUpdaterJobListPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountUpdaterJobListPagination) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The current status of the job
type AccountUpdaterJobStatus string

const (
	AccountUpdaterJobStatusPending    AccountUpdaterJobStatus = "pending"
	AccountUpdaterJobStatusProcessing AccountUpdaterJobStatus = "processing"
	AccountUpdaterJobStatusCompleted  AccountUpdaterJobStatus = "completed"
	AccountUpdaterJobStatusFailed     AccountUpdaterJobStatus = "failed"
)

func NewAccountUpdaterJobStatusFromString(s string) (AccountUpdaterJobStatus, error) {
	switch s {
	case "pending":
		return AccountUpdaterJobStatusPending, nil
	case "processing":
		return AccountUpdaterJobStatusProcessing, nil
	case "completed":
		return AccountUpdaterJobStatusCompleted, nil
	case "failed":
		return AccountUpdaterJobStatusFailed, nil
	}
	var t AccountUpdaterJobStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountUpdaterJobStatus) Ptr() *AccountUpdaterJobStatus {
	return &a
}

type AccountUpdaterRealTimeResponse struct {
	NewToken *Token `json:"new_token,omitempty" url:"new_token,omitempty"`
	// The account updater result code
	ResultCode *string `json:"result_code,omitempty" url:"result_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountUpdaterRealTimeResponse) GetNewToken() *Token {
	if a == nil {
		return nil
	}
	return a.NewToken
}

func (a *AccountUpdaterRealTimeResponse) GetResultCode() *string {
	if a == nil {
		return nil
	}
	return a.ResultCode
}

func (a *AccountUpdaterRealTimeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountUpdaterRealTimeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountUpdaterRealTimeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountUpdaterRealTimeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountUpdaterRealTimeResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AdditionalCardDetails struct {
	Brand          *string     `json:"brand,omitempty" url:"brand,omitempty"`
	Funding        *string     `json:"funding,omitempty" url:"funding,omitempty"`
	Authentication *string     `json:"authentication,omitempty" url:"authentication,omitempty"`
	Issuer         *CardIssuer `json:"issuer,omitempty" url:"issuer,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AdditionalCardDetails) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AdditionalCardDetails) GetFunding() *string {
	if a == nil {
		return nil
	}
	return a.Funding
}

func (a *AdditionalCardDetails) GetAuthentication() *string {
	if a == nil {
		return nil
	}
	return a.Authentication
}

func (a *AdditionalCardDetails) GetIssuer() *CardIssuer {
	if a == nil {
		return nil
	}
	return a.Issuer
}

func (a *AdditionalCardDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdditionalCardDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AdditionalCardDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdditionalCardDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdditionalCardDetails) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Address struct {
	Line1       *string `json:"line1,omitempty" url:"line1,omitempty"`
	Line2       *string `json:"line2,omitempty" url:"line2,omitempty"`
	Line3       *string `json:"line3,omitempty" url:"line3,omitempty"`
	PostalCode  *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	City        *string `json:"city,omitempty" url:"city,omitempty"`
	StateCode   *string `json:"state_code,omitempty" url:"state_code,omitempty"`
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetLine1() *string {
	if a == nil {
		return nil
	}
	return a.Line1
}

func (a *Address) GetLine2() *string {
	if a == nil {
		return nil
	}
	return a.Line2
}

func (a *Address) GetLine3() *string {
	if a == nil {
		return nil
	}
	return a.Line3
}

func (a *Address) GetPostalCode() *string {
	if a == nil {
		return nil
	}
	return a.PostalCode
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetStateCode() *string {
	if a == nil {
		return nil
	}
	return a.StateCode
}

func (a *Address) GetCountryCode() *string {
	if a == nil {
		return nil
	}
	return a.CountryCode
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplePayDomainRegistrationResponse struct {
	Domains []*DomainRegistrationResponse `json:"domains,omitempty" url:"domains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayDomainRegistrationResponse) GetDomains() []*DomainRegistrationResponse {
	if a == nil {
		return nil
	}
	return a.Domains
}

func (a *ApplePayDomainRegistrationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayDomainRegistrationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayDomainRegistrationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayDomainRegistrationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayDomainRegistrationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Application struct {
	ID          *string           `json:"id,omitempty" url:"id,omitempty"`
	TenantID    *string           `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Name        *string           `json:"name,omitempty" url:"name,omitempty"`
	Key         *string           `json:"key,omitempty" url:"key,omitempty"`
	Keys        []*ApplicationKey `json:"keys,omitempty" url:"keys,omitempty"`
	Type        *string           `json:"type,omitempty" url:"type,omitempty"`
	CreatedBy   *string           `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt   *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy  *string           `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt  *time.Time        `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Permissions []string          `json:"permissions,omitempty" url:"permissions,omitempty"`
	Rules       []*AccessRule     `json:"rules,omitempty" url:"rules,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Application) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *Application) GetTenantID() *string {
	if a == nil {
		return nil
	}
	return a.TenantID
}

func (a *Application) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Application) GetKey() *string {
	if a == nil {
		return nil
	}
	return a.Key
}

func (a *Application) GetKeys() []*ApplicationKey {
	if a == nil {
		return nil
	}
	return a.Keys
}

func (a *Application) GetType() *string {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *Application) GetCreatedBy() *string {
	if a == nil {
		return nil
	}
	return a.CreatedBy
}

func (a *Application) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Application) GetModifiedBy() *string {
	if a == nil {
		return nil
	}
	return a.ModifiedBy
}

func (a *Application) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *Application) GetPermissions() []string {
	if a == nil {
		return nil
	}
	return a.Permissions
}

func (a *Application) GetRules() []*AccessRule {
	if a == nil {
		return nil
	}
	return a.Rules
}

func (a *Application) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Application) UnmarshalJSON(data []byte) error {
	type embed Application
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Application(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Application) MarshalJSON() ([]byte, error) {
	type embed Application
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Application) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationKey struct {
	ID        *string    `json:"id,omitempty" url:"id,omitempty"`
	Key       *string    `json:"key,omitempty" url:"key,omitempty"`
	Version   *string    `json:"version,omitempty" url:"version,omitempty"`
	CreatedBy *string    `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationKey) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ApplicationKey) GetKey() *string {
	if a == nil {
		return nil
	}
	return a.Key
}

func (a *ApplicationKey) GetVersion() *string {
	if a == nil {
		return nil
	}
	return a.Version
}

func (a *ApplicationKey) GetCreatedBy() *string {
	if a == nil {
		return nil
	}
	return a.CreatedBy
}

func (a *ApplicationKey) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApplicationKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationKey) UnmarshalJSON(data []byte) error {
	type embed ApplicationKey
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApplicationKey(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationKey) MarshalJSON() ([]byte, error) {
	type embed ApplicationKey
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ApplicationKey) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssuranceDetails struct {
	AccountVerified         *bool `json:"account_verified,omitempty" url:"account_verified,omitempty"`
	CardHolderAuthenticated *bool `json:"card_holder_authenticated,omitempty" url:"card_holder_authenticated,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AssuranceDetails) GetAccountVerified() *bool {
	if a == nil {
		return nil
	}
	return a.AccountVerified
}

func (a *AssuranceDetails) GetCardHolderAuthenticated() *bool {
	if a == nil {
		return nil
	}
	return a.CardHolderAuthenticated
}

func (a *AssuranceDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssuranceDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AssuranceDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssuranceDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssuranceDetails) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthenticationResponse struct {
	MerchantIdentifier *string `json:"merchant_identifier,omitempty" url:"merchant_identifier,omitempty"`
	AuthenticationData *string `json:"authentication_data,omitempty" url:"authentication_data,omitempty"`
	TransactionAmount  *string `json:"transaction_amount,omitempty" url:"transaction_amount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthenticationResponse) GetMerchantIdentifier() *string {
	if a == nil {
		return nil
	}
	return a.MerchantIdentifier
}

func (a *AuthenticationResponse) GetAuthenticationData() *string {
	if a == nil {
		return nil
	}
	return a.AuthenticationData
}

func (a *AuthenticationResponse) GetTransactionAmount() *string {
	if a == nil {
		return nil
	}
	return a.TransactionAmount
}

func (a *AuthenticationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthenticationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthenticationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthenticationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthenticationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BankDetails struct {
	RoutingNumber      *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	AccountNumberLast4 *string `json:"account_number_last4,omitempty" url:"account_number_last4,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankDetails) GetRoutingNumber() *string {
	if b == nil {
		return nil
	}
	return b.RoutingNumber
}

func (b *BankDetails) GetAccountNumberLast4() *string {
	if b == nil {
		return nil
	}
	return b.AccountNumberLast4
}

func (b *BankDetails) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler BankDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankDetails) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BinDetails struct {
	CardBrand       *string            `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	Type            *string            `json:"type,omitempty" url:"type,omitempty"`
	Prepaid         *bool              `json:"prepaid,omitempty" url:"prepaid,omitempty"`
	CardSegmentType *string            `json:"card_segment_type,omitempty" url:"card_segment_type,omitempty"`
	Bank            *BinDetailsBank    `json:"bank,omitempty" url:"bank,omitempty"`
	Product         *BinDetailsProduct `json:"product,omitempty" url:"product,omitempty"`
	Country         *BinDetailsCountry `json:"country,omitempty" url:"country,omitempty"`
	Reloadable      *bool              `json:"reloadable,omitempty" url:"reloadable,omitempty"`
	PanOrToken      *string            `json:"pan_or_token,omitempty" url:"pan_or_token,omitempty"`
	AccountUpdater  *bool              `json:"account_updater,omitempty" url:"account_updater,omitempty"`
	Alm             *bool              `json:"alm,omitempty" url:"alm,omitempty"`
	DomesticOnly    *bool              `json:"domestic_only,omitempty" url:"domestic_only,omitempty"`
	GamblingBlocked *bool              `json:"gambling_blocked,omitempty" url:"gambling_blocked,omitempty"`
	Level2          *bool              `json:"level2,omitempty" url:"level2,omitempty"`
	Level3          *bool              `json:"level3,omitempty" url:"level3,omitempty"`
	IssuerCurrency  *string            `json:"issuer_currency,omitempty" url:"issuer_currency,omitempty"`
	ComboCard       *string            `json:"combo_card,omitempty" url:"combo_card,omitempty"`
	BinLength       *int               `json:"bin_length,omitempty" url:"bin_length,omitempty"`
	Authentication  interface{}        `json:"authentication,omitempty" url:"authentication,omitempty"`
	Cost            interface{}        `json:"cost,omitempty" url:"cost,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BinDetails) GetCardBrand() *string {
	if b == nil {
		return nil
	}
	return b.CardBrand
}

func (b *BinDetails) GetType() *string {
	if b == nil {
		return nil
	}
	return b.Type
}

func (b *BinDetails) GetPrepaid() *bool {
	if b == nil {
		return nil
	}
	return b.Prepaid
}

func (b *BinDetails) GetCardSegmentType() *string {
	if b == nil {
		return nil
	}
	return b.CardSegmentType
}

func (b *BinDetails) GetBank() *BinDetailsBank {
	if b == nil {
		return nil
	}
	return b.Bank
}

func (b *BinDetails) GetProduct() *BinDetailsProduct {
	if b == nil {
		return nil
	}
	return b.Product
}

func (b *BinDetails) GetCountry() *BinDetailsCountry {
	if b == nil {
		return nil
	}
	return b.Country
}

func (b *BinDetails) GetReloadable() *bool {
	if b == nil {
		return nil
	}
	return b.Reloadable
}

func (b *BinDetails) GetPanOrToken() *string {
	if b == nil {
		return nil
	}
	return b.PanOrToken
}

func (b *BinDetails) GetAccountUpdater() *bool {
	if b == nil {
		return nil
	}
	return b.AccountUpdater
}

func (b *BinDetails) GetAlm() *bool {
	if b == nil {
		return nil
	}
	return b.Alm
}

func (b *BinDetails) GetDomesticOnly() *bool {
	if b == nil {
		return nil
	}
	return b.DomesticOnly
}

func (b *BinDetails) GetGamblingBlocked() *bool {
	if b == nil {
		return nil
	}
	return b.GamblingBlocked
}

func (b *BinDetails) GetLevel2() *bool {
	if b == nil {
		return nil
	}
	return b.Level2
}

func (b *BinDetails) GetLevel3() *bool {
	if b == nil {
		return nil
	}
	return b.Level3
}

func (b *BinDetails) GetIssuerCurrency() *string {
	if b == nil {
		return nil
	}
	return b.IssuerCurrency
}

func (b *BinDetails) GetComboCard() *string {
	if b == nil {
		return nil
	}
	return b.ComboCard
}

func (b *BinDetails) GetBinLength() *int {
	if b == nil {
		return nil
	}
	return b.BinLength
}

func (b *BinDetails) GetAuthentication() interface{} {
	if b == nil {
		return nil
	}
	return b.Authentication
}

func (b *BinDetails) GetCost() interface{} {
	if b == nil {
		return nil
	}
	return b.Cost
}

func (b *BinDetails) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BinDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler BinDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BinDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BinDetails) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BinDetailsBank struct {
	Name      *string `json:"name,omitempty" url:"name,omitempty"`
	Phone     *string `json:"phone,omitempty" url:"phone,omitempty"`
	URL       *string `json:"url,omitempty" url:"url,omitempty"`
	CleanName *string `json:"clean_name,omitempty" url:"clean_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BinDetailsBank) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BinDetailsBank) GetPhone() *string {
	if b == nil {
		return nil
	}
	return b.Phone
}

func (b *BinDetailsBank) GetURL() *string {
	if b == nil {
		return nil
	}
	return b.URL
}

func (b *BinDetailsBank) GetCleanName() *string {
	if b == nil {
		return nil
	}
	return b.CleanName
}

func (b *BinDetailsBank) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BinDetailsBank) UnmarshalJSON(data []byte) error {
	type unmarshaler BinDetailsBank
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BinDetailsBank(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BinDetailsBank) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BinDetailsCountry struct {
	Alpha2  *string `json:"alpha2,omitempty" url:"alpha2,omitempty"`
	Name    *string `json:"name,omitempty" url:"name,omitempty"`
	Numeric *string `json:"numeric,omitempty" url:"numeric,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BinDetailsCountry) GetAlpha2() *string {
	if b == nil {
		return nil
	}
	return b.Alpha2
}

func (b *BinDetailsCountry) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BinDetailsCountry) GetNumeric() *string {
	if b == nil {
		return nil
	}
	return b.Numeric
}

func (b *BinDetailsCountry) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BinDetailsCountry) UnmarshalJSON(data []byte) error {
	type unmarshaler BinDetailsCountry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BinDetailsCountry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BinDetailsCountry) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BinDetailsProduct struct {
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BinDetailsProduct) GetCode() *string {
	if b == nil {
		return nil
	}
	return b.Code
}

func (b *BinDetailsProduct) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BinDetailsProduct) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BinDetailsProduct) UnmarshalJSON(data []byte) error {
	type unmarshaler BinDetailsProduct
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BinDetailsProduct(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BinDetailsProduct) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Card struct {
	Number          *string `json:"number,omitempty" url:"number,omitempty"`
	ExpirationMonth *int    `json:"expiration_month,omitempty" url:"expiration_month,omitempty"`
	ExpirationYear  *int    `json:"expiration_year,omitempty" url:"expiration_year,omitempty"`
	Cvc             *string `json:"cvc,omitempty" url:"cvc,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Card) GetNumber() *string {
	if c == nil {
		return nil
	}
	return c.Number
}

func (c *Card) GetExpirationMonth() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationMonth
}

func (c *Card) GetExpirationYear() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationYear
}

func (c *Card) GetCvc() *string {
	if c == nil {
		return nil
	}
	return c.Cvc
}

func (c *Card) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Card) UnmarshalJSON(data []byte) error {
	type unmarshaler Card
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Card(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Card) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardDetails struct {
	Bin             *string                  `json:"bin,omitempty" url:"bin,omitempty"`
	Last4           *string                  `json:"last4,omitempty" url:"last4,omitempty"`
	ExpirationMonth *int                     `json:"expiration_month,omitempty" url:"expiration_month,omitempty"`
	ExpirationYear  *int                     `json:"expiration_year,omitempty" url:"expiration_year,omitempty"`
	Brand           *string                  `json:"brand,omitempty" url:"brand,omitempty"`
	Funding         *string                  `json:"funding,omitempty" url:"funding,omitempty"`
	Authentication  *string                  `json:"authentication,omitempty" url:"authentication,omitempty"`
	Issuer          *CardIssuer              `json:"issuer,omitempty" url:"issuer,omitempty"`
	IssuerCountry   *CardIssuerCountry       `json:"issuer_country,omitempty" url:"issuer_country,omitempty"`
	Segment         *string                  `json:"segment,omitempty" url:"segment,omitempty"`
	Additional      []*AdditionalCardDetails `json:"additional,omitempty" url:"additional,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardDetails) GetBin() *string {
	if c == nil {
		return nil
	}
	return c.Bin
}

func (c *CardDetails) GetLast4() *string {
	if c == nil {
		return nil
	}
	return c.Last4
}

func (c *CardDetails) GetExpirationMonth() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationMonth
}

func (c *CardDetails) GetExpirationYear() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationYear
}

func (c *CardDetails) GetBrand() *string {
	if c == nil {
		return nil
	}
	return c.Brand
}

func (c *CardDetails) GetFunding() *string {
	if c == nil {
		return nil
	}
	return c.Funding
}

func (c *CardDetails) GetAuthentication() *string {
	if c == nil {
		return nil
	}
	return c.Authentication
}

func (c *CardDetails) GetIssuer() *CardIssuer {
	if c == nil {
		return nil
	}
	return c.Issuer
}

func (c *CardDetails) GetIssuerCountry() *CardIssuerCountry {
	if c == nil {
		return nil
	}
	return c.IssuerCountry
}

func (c *CardDetails) GetSegment() *string {
	if c == nil {
		return nil
	}
	return c.Segment
}

func (c *CardDetails) GetAdditional() []*AdditionalCardDetails {
	if c == nil {
		return nil
	}
	return c.Additional
}

func (c *CardDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CardDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardIssuer struct {
	Country *string `json:"country,omitempty" url:"country,omitempty"`
	Name    *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardIssuer) GetCountry() *string {
	if c == nil {
		return nil
	}
	return c.Country
}

func (c *CardIssuer) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CardIssuer) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardIssuer) UnmarshalJSON(data []byte) error {
	type unmarshaler CardIssuer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardIssuer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardIssuer) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardIssuerCountry struct {
	Alpha2  *string `json:"alpha2,omitempty" url:"alpha2,omitempty"`
	Name    *string `json:"name,omitempty" url:"name,omitempty"`
	Numeric *string `json:"numeric,omitempty" url:"numeric,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardIssuerCountry) GetAlpha2() *string {
	if c == nil {
		return nil
	}
	return c.Alpha2
}

func (c *CardIssuerCountry) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CardIssuerCountry) GetNumeric() *string {
	if c == nil {
		return nil
	}
	return c.Numeric
}

func (c *CardIssuerCountry) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardIssuerCountry) UnmarshalJSON(data []byte) error {
	type unmarshaler CardIssuerCountry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardIssuerCountry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardIssuerCountry) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardholderInfo struct {
	Name    *string  `json:"name,omitempty" url:"name,omitempty"`
	Address *Address `json:"address,omitempty" url:"address,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardholderInfo) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CardholderInfo) GetAddress() *Address {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CardholderInfo) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardholderInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler CardholderInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardholderInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardholderInfo) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Condition struct {
	Attribute *string `json:"attribute,omitempty" url:"attribute,omitempty"`
	Operator  *string `json:"operator,omitempty" url:"operator,omitempty"`
	Value     *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Condition) GetAttribute() *string {
	if c == nil {
		return nil
	}
	return c.Attribute
}

func (c *Condition) GetOperator() *string {
	if c == nil {
		return nil
	}
	return c.Operator
}

func (c *Condition) GetValue() *string {
	if c == nil {
		return nil
	}
	return c.Value
}

func (c *Condition) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Condition) UnmarshalJSON(data []byte) error {
	type unmarshaler Condition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Condition(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Condition) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateReactorFormulaRequest struct {
	ID                *string                           `json:"id,omitempty" url:"id,omitempty"`
	Type              string                            `json:"type" url:"type"`
	Name              string                            `json:"name" url:"name"`
	Description       *string                           `json:"description,omitempty" url:"description,omitempty"`
	Icon              *string                           `json:"icon,omitempty" url:"icon,omitempty"`
	Code              *string                           `json:"code,omitempty" url:"code,omitempty"`
	Configuration     []*ReactorFormulaConfiguration    `json:"configuration,omitempty" url:"configuration,omitempty"`
	RequestParameters []*ReactorFormulaRequestParameter `json:"request_parameters,omitempty" url:"request_parameters,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateReactorFormulaRequest) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateReactorFormulaRequest) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateReactorFormulaRequest) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateReactorFormulaRequest) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateReactorFormulaRequest) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CreateReactorFormulaRequest) GetCode() *string {
	if c == nil {
		return nil
	}
	return c.Code
}

func (c *CreateReactorFormulaRequest) GetConfiguration() []*ReactorFormulaConfiguration {
	if c == nil {
		return nil
	}
	return c.Configuration
}

func (c *CreateReactorFormulaRequest) GetRequestParameters() []*ReactorFormulaRequestParameter {
	if c == nil {
		return nil
	}
	return c.RequestParameters
}

func (c *CreateReactorFormulaRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateReactorFormulaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateReactorFormulaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateReactorFormulaRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateReactorFormulaRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTenantConnectionResponse struct {
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTenantConnectionResponse) GetConnectionID() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionID
}

func (c *CreateTenantConnectionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTenantConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTenantConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTenantConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTenantConnectionResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateThreeDsSessionResponse struct {
	ID                    *string `json:"id,omitempty" url:"id,omitempty"`
	Type                  *string `json:"type,omitempty" url:"type,omitempty"`
	CardBrand             *string `json:"cardBrand,omitempty" url:"cardBrand,omitempty"`
	MethodURL             *string `json:"method_url,omitempty" url:"method_url,omitempty"`
	MethodNotificationURL *string `json:"method_notification_url,omitempty" url:"method_notification_url,omitempty"`
	DirectoryServerID     *string `json:"directory_server_id,omitempty" url:"directory_server_id,omitempty"`
	RecommendedVersion    *string `json:"recommended_version,omitempty" url:"recommended_version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateThreeDsSessionResponse) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateThreeDsSessionResponse) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CreateThreeDsSessionResponse) GetCardBrand() *string {
	if c == nil {
		return nil
	}
	return c.CardBrand
}

func (c *CreateThreeDsSessionResponse) GetMethodURL() *string {
	if c == nil {
		return nil
	}
	return c.MethodURL
}

func (c *CreateThreeDsSessionResponse) GetMethodNotificationURL() *string {
	if c == nil {
		return nil
	}
	return c.MethodNotificationURL
}

func (c *CreateThreeDsSessionResponse) GetDirectoryServerID() *string {
	if c == nil {
		return nil
	}
	return c.DirectoryServerID
}

func (c *CreateThreeDsSessionResponse) GetRecommendedVersion() *string {
	if c == nil {
		return nil
	}
	return c.RecommendedVersion
}

func (c *CreateThreeDsSessionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateThreeDsSessionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateThreeDsSessionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateThreeDsSessionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateThreeDsSessionResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTokenIntentResponse struct {
	ID             *string            `json:"id,omitempty" url:"id,omitempty"`
	Type           *string            `json:"type,omitempty" url:"type,omitempty"`
	TenantID       *string            `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Fingerprint    *string            `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	CreatedBy      *string            `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt      *time.Time         `json:"created_at,omitempty" url:"created_at,omitempty"`
	ExpiresAt      *time.Time         `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Card           *CardDetails       `json:"card,omitempty" url:"card,omitempty"`
	Bank           *BankDetails       `json:"bank,omitempty" url:"bank,omitempty"`
	NetworkToken   *CardDetails       `json:"network_token,omitempty" url:"network_token,omitempty"`
	Authentication interface{}        `json:"authentication,omitempty" url:"authentication,omitempty"`
	Extras         *TokenIntentExtras `json:"_extras,omitempty" url:"_extras,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTokenIntentResponse) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateTokenIntentResponse) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CreateTokenIntentResponse) GetTenantID() *string {
	if c == nil {
		return nil
	}
	return c.TenantID
}

func (c *CreateTokenIntentResponse) GetFingerprint() *string {
	if c == nil {
		return nil
	}
	return c.Fingerprint
}

func (c *CreateTokenIntentResponse) GetCreatedBy() *string {
	if c == nil {
		return nil
	}
	return c.CreatedBy
}

func (c *CreateTokenIntentResponse) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateTokenIntentResponse) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *CreateTokenIntentResponse) GetCard() *CardDetails {
	if c == nil {
		return nil
	}
	return c.Card
}

func (c *CreateTokenIntentResponse) GetBank() *BankDetails {
	if c == nil {
		return nil
	}
	return c.Bank
}

func (c *CreateTokenIntentResponse) GetNetworkToken() *CardDetails {
	if c == nil {
		return nil
	}
	return c.NetworkToken
}

func (c *CreateTokenIntentResponse) GetAuthentication() interface{} {
	if c == nil {
		return nil
	}
	return c.Authentication
}

func (c *CreateTokenIntentResponse) GetExtras() *TokenIntentExtras {
	if c == nil {
		return nil
	}
	return c.Extras
}

func (c *CreateTokenIntentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTokenIntentResponse) UnmarshalJSON(data []byte) error {
	type embed CreateTokenIntentResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateTokenIntentResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTokenIntentResponse) MarshalJSON() ([]byte, error) {
	type embed CreateTokenIntentResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateTokenIntentResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DomainRegistrationResponse struct {
	Domain *string `json:"domain,omitempty" url:"domain,omitempty"`
	Status *string `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DomainRegistrationResponse) GetDomain() *string {
	if d == nil {
		return nil
	}
	return d.Domain
}

func (d *DomainRegistrationResponse) GetStatus() *string {
	if d == nil {
		return nil
	}
	return d.Status
}

func (d *DomainRegistrationResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DomainRegistrationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DomainRegistrationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DomainRegistrationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DomainRegistrationResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EventTypes = []string

type GetApplications struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Type  []string `json:"type,omitempty" url:"type,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetApplications) GetID() []string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetApplications) GetType() []string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetApplications) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetApplications) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetApplications) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetApplications) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetApplications) UnmarshalJSON(data []byte) error {
	type unmarshaler GetApplications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetApplications(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetApplications) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetLogs struct {
	EntityType *string    `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	EntityID   *string    `json:"entity_id,omitempty" url:"entity_id,omitempty"`
	StartDate  *time.Time `json:"start_date,omitempty" url:"start_date,omitempty"`
	EndDate    *time.Time `json:"end_date,omitempty" url:"end_date,omitempty"`
	Page       *int       `json:"page,omitempty" url:"page,omitempty"`
	Start      *string    `json:"start,omitempty" url:"start,omitempty"`
	Size       *int       `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetLogs) GetEntityType() *string {
	if g == nil {
		return nil
	}
	return g.EntityType
}

func (g *GetLogs) GetEntityID() *string {
	if g == nil {
		return nil
	}
	return g.EntityID
}

func (g *GetLogs) GetStartDate() *time.Time {
	if g == nil {
		return nil
	}
	return g.StartDate
}

func (g *GetLogs) GetEndDate() *time.Time {
	if g == nil {
		return nil
	}
	return g.EndDate
}

func (g *GetLogs) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetLogs) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetLogs) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetLogs) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetLogs) UnmarshalJSON(data []byte) error {
	type embed GetLogs
	var unmarshaler = struct {
		embed
		StartDate *internal.DateTime `json:"start_date,omitempty"`
		EndDate   *internal.DateTime `json:"end_date,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetLogs(unmarshaler.embed)
	g.StartDate = unmarshaler.StartDate.TimePtr()
	g.EndDate = unmarshaler.EndDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetLogs) MarshalJSON() ([]byte, error) {
	type embed GetLogs
	var marshaler = struct {
		embed
		StartDate *internal.DateTime `json:"start_date,omitempty"`
		EndDate   *internal.DateTime `json:"end_date,omitempty"`
	}{
		embed:     embed(*g),
		StartDate: internal.NewOptionalDateTime(g.StartDate),
		EndDate:   internal.NewOptionalDateTime(g.EndDate),
	}
	return json.Marshal(marshaler)
}

func (g *GetLogs) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetPermissions struct {
	ApplicationType *string `json:"application_type,omitempty" url:"application_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPermissions) GetApplicationType() *string {
	if g == nil {
		return nil
	}
	return g.ApplicationType
}

func (g *GetPermissions) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPermissions) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPermissions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPermissions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPermissions) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetProxies struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Name  *string  `json:"name,omitempty" url:"name,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetProxies) GetID() []string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetProxies) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetProxies) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetProxies) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetProxies) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetProxies) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetProxies) UnmarshalJSON(data []byte) error {
	type unmarshaler GetProxies
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetProxies(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetProxies) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetReactorFormulas struct {
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	Page  *int    `json:"page,omitempty" url:"page,omitempty"`
	Start *string `json:"start,omitempty" url:"start,omitempty"`
	Size  *int    `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetReactorFormulas) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetReactorFormulas) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetReactorFormulas) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetReactorFormulas) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetReactorFormulas) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetReactorFormulas) UnmarshalJSON(data []byte) error {
	type unmarshaler GetReactorFormulas
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetReactorFormulas(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetReactorFormulas) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetReactors struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Name  *string  `json:"name,omitempty" url:"name,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetReactors) GetID() []string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetReactors) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetReactors) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetReactors) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetReactors) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetReactors) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetReactors) UnmarshalJSON(data []byte) error {
	type unmarshaler GetReactors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetReactors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetReactors) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTenantInvitations struct {
	Status *TenantInvitationStatus `json:"status,omitempty" url:"status,omitempty"`
	Page   *int                    `json:"page,omitempty" url:"page,omitempty"`
	Start  *string                 `json:"start,omitempty" url:"start,omitempty"`
	Size   *int                    `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTenantInvitations) GetStatus() *TenantInvitationStatus {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetTenantInvitations) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetTenantInvitations) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetTenantInvitations) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTenantInvitations) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTenantInvitations) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTenantInvitations
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTenantInvitations(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTenantInvitations) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTenantMembers struct {
	UserID []string `json:"user_id,omitempty" url:"user_id,omitempty"`
	Page   *int     `json:"page,omitempty" url:"page,omitempty"`
	Start  *string  `json:"start,omitempty" url:"start,omitempty"`
	Size   *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTenantMembers) GetUserID() []string {
	if g == nil {
		return nil
	}
	return g.UserID
}

func (g *GetTenantMembers) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetTenantMembers) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetTenantMembers) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTenantMembers) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTenantMembers) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTenantMembers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTenantMembers(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTenantMembers) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTokens struct {
	ID       []string           `json:"id,omitempty" url:"id,omitempty"`
	Metadata map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	Page     *int               `json:"page,omitempty" url:"page,omitempty"`
	Start    *string            `json:"start,omitempty" url:"start,omitempty"`
	Size     *int               `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTokens) GetID() []string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetTokens) GetMetadata() map[string]*string {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetTokens) GetPage() *int {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetTokens) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetTokens) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTokens) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTokens) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokens
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTokens(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTokens) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTokensV2 struct {
	Type        *string            `json:"type,omitempty" url:"type,omitempty"`
	Container   *string            `json:"container,omitempty" url:"container,omitempty"`
	Fingerprint *string            `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	Metadata    map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	Start       *string            `json:"start,omitempty" url:"start,omitempty"`
	Size        *int               `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTokensV2) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetTokensV2) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetTokensV2) GetFingerprint() *string {
	if g == nil {
		return nil
	}
	return g.Fingerprint
}

func (g *GetTokensV2) GetMetadata() map[string]*string {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetTokensV2) GetStart() *string {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetTokensV2) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTokensV2) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTokensV2) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokensV2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTokensV2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTokensV2) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type NetworkToken struct {
	ID           *string      `json:"id,omitempty" url:"id,omitempty"`
	TenantID     *string      `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Data         *Card        `json:"data,omitempty" url:"data,omitempty"`
	NetworkToken *CardDetails `json:"network_token,omitempty" url:"network_token,omitempty"`
	Status       *string      `json:"status,omitempty" url:"status,omitempty"`
	CreatedBy    *string      `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt    *time.Time   `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkToken) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NetworkToken) GetTenantID() *string {
	if n == nil {
		return nil
	}
	return n.TenantID
}

func (n *NetworkToken) GetData() *Card {
	if n == nil {
		return nil
	}
	return n.Data
}

func (n *NetworkToken) GetNetworkToken() *CardDetails {
	if n == nil {
		return nil
	}
	return n.NetworkToken
}

func (n *NetworkToken) GetStatus() *string {
	if n == nil {
		return nil
	}
	return n.Status
}

func (n *NetworkToken) GetCreatedBy() *string {
	if n == nil {
		return nil
	}
	return n.CreatedBy
}

func (n *NetworkToken) GetCreatedAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.CreatedAt
}

func (n *NetworkToken) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkToken) UnmarshalJSON(data []byte) error {
	type embed NetworkToken
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NetworkToken(unmarshaler.embed)
	n.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkToken) MarshalJSON() ([]byte, error) {
	type embed NetworkToken
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*n),
		CreatedAt: internal.NewOptionalDateTime(n.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (n *NetworkToken) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Pagination struct {
	TotalItems *int    `json:"total_items,omitempty" url:"total_items,omitempty"`
	PageNumber *int    `json:"page_number,omitempty" url:"page_number,omitempty"`
	PageSize   *int    `json:"page_size,omitempty" url:"page_size,omitempty"`
	TotalPages *int    `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	After      *string `json:"after,omitempty" url:"after,omitempty"`
	Next       *string `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Pagination) GetTotalItems() *int {
	if p == nil {
		return nil
	}
	return p.TotalItems
}

func (p *Pagination) GetPageNumber() *int {
	if p == nil {
		return nil
	}
	return p.PageNumber
}

func (p *Pagination) GetPageSize() *int {
	if p == nil {
		return nil
	}
	return p.PageSize
}

func (p *Pagination) GetTotalPages() *int {
	if p == nil {
		return nil
	}
	return p.TotalPages
}

func (p *Pagination) GetAfter() *string {
	if p == nil {
		return nil
	}
	return p.After
}

func (p *Pagination) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *Pagination) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagination) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Privacy struct {
	Classification    *string `json:"classification,omitempty" url:"classification,omitempty"`
	ImpactLevel       *string `json:"impact_level,omitempty" url:"impact_level,omitempty"`
	RestrictionPolicy *string `json:"restriction_policy,omitempty" url:"restriction_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Privacy) GetClassification() *string {
	if p == nil {
		return nil
	}
	return p.Classification
}

func (p *Privacy) GetImpactLevel() *string {
	if p == nil {
		return nil
	}
	return p.ImpactLevel
}

func (p *Privacy) GetRestrictionPolicy() *string {
	if p == nil {
		return nil
	}
	return p.RestrictionPolicy
}

func (p *Privacy) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Privacy) UnmarshalJSON(data []byte) error {
	type unmarshaler Privacy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Privacy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Privacy) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProblemDetails struct {
	Type     *string `json:"type,omitempty" url:"type,omitempty"`
	Title    *string `json:"title,omitempty" url:"title,omitempty"`
	Status   *int    `json:"status,omitempty" url:"status,omitempty"`
	Detail   *string `json:"detail,omitempty" url:"detail,omitempty"`
	Instance *string `json:"instance,omitempty" url:"instance,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (p *ProblemDetails) GetType() *string {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *ProblemDetails) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *ProblemDetails) GetStatus() *int {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *ProblemDetails) GetDetail() *string {
	if p == nil {
		return nil
	}
	return p.Detail
}

func (p *ProblemDetails) GetInstance() *string {
	if p == nil {
		return nil
	}
	return p.Instance
}

func (p *ProblemDetails) GetExtraProperties() map[string]interface{} {
	return p.ExtraProperties
}

func (p *ProblemDetails) UnmarshalJSON(data []byte) error {
	type embed ProblemDetails
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProblemDetails(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.ExtraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProblemDetails) MarshalJSON() ([]byte, error) {
	type embed ProblemDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, p.ExtraProperties)
}

func (p *ProblemDetails) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A public signing key in PEM format. The key is represented as a string
// and includes the BEGIN and END markers along with the base64-encoded
// key data.
type PublicKey = string

type ReactorFormulaPaginatedList struct {
	Pagination *Pagination       `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*ReactorFormula `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReactorFormulaPaginatedList) GetPagination() *Pagination {
	if r == nil {
		return nil
	}
	return r.Pagination
}

func (r *ReactorFormulaPaginatedList) GetData() []*ReactorFormula {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ReactorFormulaPaginatedList) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReactorFormulaPaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler ReactorFormulaPaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReactorFormulaPaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReactorFormulaPaginatedList) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type StringStringKeyValuePair struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StringStringKeyValuePair) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *StringStringKeyValuePair) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *StringStringKeyValuePair) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringStringKeyValuePair) UnmarshalJSON(data []byte) error {
	type unmarshaler StringStringKeyValuePair
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringStringKeyValuePair(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringStringKeyValuePair) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Tenant struct {
	ID         *string            `json:"id,omitempty" url:"id,omitempty"`
	OwnerID    *string            `json:"owner_id,omitempty" url:"owner_id,omitempty"`
	Name       *string            `json:"name,omitempty" url:"name,omitempty"`
	Type       *string            `json:"type,omitempty" url:"type,omitempty"`
	CreatedBy  *string            `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt  *time.Time         `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy *string            `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt *time.Time         `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Settings   map[string]*string `json:"settings,omitempty" url:"settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Tenant) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *Tenant) GetOwnerID() *string {
	if t == nil {
		return nil
	}
	return t.OwnerID
}

func (t *Tenant) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *Tenant) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *Tenant) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *Tenant) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *Tenant) GetModifiedBy() *string {
	if t == nil {
		return nil
	}
	return t.ModifiedBy
}

func (t *Tenant) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *Tenant) GetSettings() map[string]*string {
	if t == nil {
		return nil
	}
	return t.Settings
}

func (t *Tenant) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Tenant) UnmarshalJSON(data []byte) error {
	type embed Tenant
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Tenant(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tenant) MarshalJSON() ([]byte, error) {
	type embed Tenant
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *Tenant) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantConnectionOptions struct {
	DomainAliases []string `json:"domain_aliases,omitempty" url:"domain_aliases,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantConnectionOptions) GetDomainAliases() []string {
	if t == nil {
		return nil
	}
	return t.DomainAliases
}

func (t *TenantConnectionOptions) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantConnectionOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantConnectionOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantConnectionOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantConnectionOptions) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationResponse struct {
	ID         *string                 `json:"id,omitempty" url:"id,omitempty"`
	TenantID   *string                 `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Email      *string                 `json:"email,omitempty" url:"email,omitempty"`
	Role       *string                 `json:"role,omitempty" url:"role,omitempty"`
	Status     *TenantInvitationStatus `json:"status,omitempty" url:"status,omitempty"`
	ExpiresAt  *time.Time              `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	CreatedBy  *string                 `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt  *time.Time              `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy *string                 `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt *time.Time              `json:"modified_at,omitempty" url:"modified_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantInvitationResponse) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TenantInvitationResponse) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *TenantInvitationResponse) GetEmail() *string {
	if t == nil {
		return nil
	}
	return t.Email
}

func (t *TenantInvitationResponse) GetRole() *string {
	if t == nil {
		return nil
	}
	return t.Role
}

func (t *TenantInvitationResponse) GetStatus() *TenantInvitationStatus {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TenantInvitationResponse) GetExpiresAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ExpiresAt
}

func (t *TenantInvitationResponse) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TenantInvitationResponse) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TenantInvitationResponse) GetModifiedBy() *string {
	if t == nil {
		return nil
	}
	return t.ModifiedBy
}

func (t *TenantInvitationResponse) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *TenantInvitationResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantInvitationResponse) UnmarshalJSON(data []byte) error {
	type embed TenantInvitationResponse
	var unmarshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TenantInvitationResponse(unmarshaler.embed)
	t.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantInvitationResponse) MarshalJSON() ([]byte, error) {
	type embed TenantInvitationResponse
	var marshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*t),
		ExpiresAt:  internal.NewOptionalDateTime(t.ExpiresAt),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TenantInvitationResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationResponsePaginatedList struct {
	Pagination *Pagination                 `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*TenantInvitationResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantInvitationResponsePaginatedList) GetPagination() *Pagination {
	if t == nil {
		return nil
	}
	return t.Pagination
}

func (t *TenantInvitationResponsePaginatedList) GetData() []*TenantInvitationResponse {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TenantInvitationResponsePaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantInvitationResponsePaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantInvitationResponsePaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantInvitationResponsePaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantInvitationResponsePaginatedList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationStatus string

const (
	TenantInvitationStatusPending TenantInvitationStatus = "PENDING"
	TenantInvitationStatusExpired TenantInvitationStatus = "EXPIRED"
)

func NewTenantInvitationStatusFromString(s string) (TenantInvitationStatus, error) {
	switch s {
	case "PENDING":
		return TenantInvitationStatusPending, nil
	case "EXPIRED":
		return TenantInvitationStatusExpired, nil
	}
	var t TenantInvitationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TenantInvitationStatus) Ptr() *TenantInvitationStatus {
	return &t
}

type TenantMemberResponse struct {
	ID          *string    `json:"id,omitempty" url:"id,omitempty"`
	TenantID    *string    `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	User        *User      `json:"user,omitempty" url:"user,omitempty"`
	Role        *string    `json:"role,omitempty" url:"role,omitempty"`
	CreatedBy   *string    `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedDate *time.Time `json:"created_date,omitempty" url:"created_date,omitempty"`
	ModifiedBy  *string    `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt  *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantMemberResponse) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TenantMemberResponse) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *TenantMemberResponse) GetUser() *User {
	if t == nil {
		return nil
	}
	return t.User
}

func (t *TenantMemberResponse) GetRole() *string {
	if t == nil {
		return nil
	}
	return t.Role
}

func (t *TenantMemberResponse) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TenantMemberResponse) GetCreatedDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedDate
}

func (t *TenantMemberResponse) GetModifiedBy() *string {
	if t == nil {
		return nil
	}
	return t.ModifiedBy
}

func (t *TenantMemberResponse) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *TenantMemberResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantMemberResponse) UnmarshalJSON(data []byte) error {
	type embed TenantMemberResponse
	var unmarshaler = struct {
		embed
		CreatedDate *internal.DateTime `json:"created_date,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TenantMemberResponse(unmarshaler.embed)
	t.CreatedDate = unmarshaler.CreatedDate.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantMemberResponse) MarshalJSON() ([]byte, error) {
	type embed TenantMemberResponse
	var marshaler = struct {
		embed
		CreatedDate *internal.DateTime `json:"created_date,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:       embed(*t),
		CreatedDate: internal.NewOptionalDateTime(t.CreatedDate),
		ModifiedAt:  internal.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TenantMemberResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantMemberResponsePaginatedList struct {
	Pagination *Pagination             `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*TenantMemberResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantMemberResponsePaginatedList) GetPagination() *Pagination {
	if t == nil {
		return nil
	}
	return t.Pagination
}

func (t *TenantMemberResponsePaginatedList) GetData() []*TenantMemberResponse {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TenantMemberResponsePaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantMemberResponsePaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantMemberResponsePaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantMemberResponsePaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantMemberResponsePaginatedList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantUsageReport struct {
	TotalTokens *int64 `json:"total_tokens,omitempty" url:"total_tokens,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantUsageReport) GetTotalTokens() *int64 {
	if t == nil {
		return nil
	}
	return t.TotalTokens
}

func (t *TenantUsageReport) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantUsageReport) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantUsageReport
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantUsageReport(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantUsageReport) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAcsRenderingType struct {
	AcsInterface  *string `json:"acsInterface,omitempty" url:"acsInterface,omitempty"`
	AcsUITemplate *string `json:"acsUiTemplate,omitempty" url:"acsUiTemplate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsAcsRenderingType) GetAcsInterface() *string {
	if t == nil {
		return nil
	}
	return t.AcsInterface
}

func (t *ThreeDsAcsRenderingType) GetAcsUITemplate() *string {
	if t == nil {
		return nil
	}
	return t.AcsUITemplate
}

func (t *ThreeDsAcsRenderingType) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAcsRenderingType) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAcsRenderingType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAcsRenderingType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAcsRenderingType) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAddress struct {
	Line1       *string `json:"line1,omitempty" url:"line1,omitempty"`
	Line2       *string `json:"line2,omitempty" url:"line2,omitempty"`
	Line3       *string `json:"line3,omitempty" url:"line3,omitempty"`
	PostalCode  *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	City        *string `json:"city,omitempty" url:"city,omitempty"`
	StateCode   *string `json:"state_code,omitempty" url:"state_code,omitempty"`
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsAddress) GetLine1() *string {
	if t == nil {
		return nil
	}
	return t.Line1
}

func (t *ThreeDsAddress) GetLine2() *string {
	if t == nil {
		return nil
	}
	return t.Line2
}

func (t *ThreeDsAddress) GetLine3() *string {
	if t == nil {
		return nil
	}
	return t.Line3
}

func (t *ThreeDsAddress) GetPostalCode() *string {
	if t == nil {
		return nil
	}
	return t.PostalCode
}

func (t *ThreeDsAddress) GetCity() *string {
	if t == nil {
		return nil
	}
	return t.City
}

func (t *ThreeDsAddress) GetStateCode() *string {
	if t == nil {
		return nil
	}
	return t.StateCode
}

func (t *ThreeDsAddress) GetCountryCode() *string {
	if t == nil {
		return nil
	}
	return t.CountryCode
}

func (t *ThreeDsAddress) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAddress) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAuthentication struct {
	PanTokenID                  *string                    `json:"pan_token_id,omitempty" url:"pan_token_id,omitempty"`
	TokenID                     *string                    `json:"token_id,omitempty" url:"token_id,omitempty"`
	TokenIntentID               *string                    `json:"token_intent_id,omitempty" url:"token_intent_id,omitempty"`
	SessionID                   *string                    `json:"session_id,omitempty" url:"session_id,omitempty"`
	ThreedsVersion              *string                    `json:"threeds_version,omitempty" url:"threeds_version,omitempty"`
	AcsTransactionID            *string                    `json:"acs_transaction_id,omitempty" url:"acs_transaction_id,omitempty"`
	DsTransactionID             *string                    `json:"ds_transaction_id,omitempty" url:"ds_transaction_id,omitempty"`
	SdkTransactionID            *string                    `json:"sdk_transaction_id,omitempty" url:"sdk_transaction_id,omitempty"`
	AcsReferenceNumber          *string                    `json:"acs_reference_number,omitempty" url:"acs_reference_number,omitempty"`
	DsReferenceNumber           *string                    `json:"ds_reference_number,omitempty" url:"ds_reference_number,omitempty"`
	LiabilityShifted            *bool                      `json:"liability_shifted,omitempty" url:"liability_shifted,omitempty"`
	AuthenticationValue         *string                    `json:"authentication_value,omitempty" url:"authentication_value,omitempty"`
	AuthenticationStatus        *string                    `json:"authentication_status,omitempty" url:"authentication_status,omitempty"`
	AuthenticationStatusCode    *string                    `json:"authentication_status_code,omitempty" url:"authentication_status_code,omitempty"`
	DirectoryStatusCode         *string                    `json:"directory_status_code,omitempty" url:"directory_status_code,omitempty"`
	AuthenticationStatusReason  *string                    `json:"authentication_status_reason,omitempty" url:"authentication_status_reason,omitempty"`
	Eci                         *string                    `json:"eci,omitempty" url:"eci,omitempty"`
	AcsChallengeMandated        *string                    `json:"acs_challenge_mandated,omitempty" url:"acs_challenge_mandated,omitempty"`
	AcsDecoupledAuthentication  *string                    `json:"acs_decoupled_authentication,omitempty" url:"acs_decoupled_authentication,omitempty"`
	AuthenticationChallengeType *string                    `json:"authentication_challenge_type,omitempty" url:"authentication_challenge_type,omitempty"`
	AcsRenderingType            *ThreeDsAcsRenderingType   `json:"acs_rendering_type,omitempty" url:"acs_rendering_type,omitempty"`
	AcsSignedContent            *string                    `json:"acs_signed_content,omitempty" url:"acs_signed_content,omitempty"`
	AcsChallengeURL             *string                    `json:"acs_challenge_url,omitempty" url:"acs_challenge_url,omitempty"`
	ChallengePreference         *string                    `json:"challenge_preference,omitempty" url:"challenge_preference,omitempty"`
	ChallengePreferenceCode     *string                    `json:"challenge_preference_code,omitempty" url:"challenge_preference_code,omitempty"`
	ChallengeAttempts           *string                    `json:"challenge_attempts,omitempty" url:"challenge_attempts,omitempty"`
	ChallengeCancelReason       *string                    `json:"challenge_cancel_reason,omitempty" url:"challenge_cancel_reason,omitempty"`
	ChallengeCancelReasonCode   *string                    `json:"challenge_cancel_reason_code,omitempty" url:"challenge_cancel_reason_code,omitempty"`
	CardholderInfo              *string                    `json:"cardholder_info,omitempty" url:"cardholder_info,omitempty"`
	WhitelistStatus             *string                    `json:"whitelist_status,omitempty" url:"whitelist_status,omitempty"`
	WhitelistStatusSource       *string                    `json:"whitelist_status_source,omitempty" url:"whitelist_status_source,omitempty"`
	MessageExtensions           []*ThreeDsMessageExtension `json:"message_extensions,omitempty" url:"message_extensions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsAuthentication) GetPanTokenID() *string {
	if t == nil {
		return nil
	}
	return t.PanTokenID
}

func (t *ThreeDsAuthentication) GetTokenID() *string {
	if t == nil {
		return nil
	}
	return t.TokenID
}

func (t *ThreeDsAuthentication) GetTokenIntentID() *string {
	if t == nil {
		return nil
	}
	return t.TokenIntentID
}

func (t *ThreeDsAuthentication) GetSessionID() *string {
	if t == nil {
		return nil
	}
	return t.SessionID
}

func (t *ThreeDsAuthentication) GetThreedsVersion() *string {
	if t == nil {
		return nil
	}
	return t.ThreedsVersion
}

func (t *ThreeDsAuthentication) GetAcsTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.AcsTransactionID
}

func (t *ThreeDsAuthentication) GetDsTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.DsTransactionID
}

func (t *ThreeDsAuthentication) GetSdkTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.SdkTransactionID
}

func (t *ThreeDsAuthentication) GetAcsReferenceNumber() *string {
	if t == nil {
		return nil
	}
	return t.AcsReferenceNumber
}

func (t *ThreeDsAuthentication) GetDsReferenceNumber() *string {
	if t == nil {
		return nil
	}
	return t.DsReferenceNumber
}

func (t *ThreeDsAuthentication) GetLiabilityShifted() *bool {
	if t == nil {
		return nil
	}
	return t.LiabilityShifted
}

func (t *ThreeDsAuthentication) GetAuthenticationValue() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationValue
}

func (t *ThreeDsAuthentication) GetAuthenticationStatus() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationStatus
}

func (t *ThreeDsAuthentication) GetAuthenticationStatusCode() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationStatusCode
}

func (t *ThreeDsAuthentication) GetDirectoryStatusCode() *string {
	if t == nil {
		return nil
	}
	return t.DirectoryStatusCode
}

func (t *ThreeDsAuthentication) GetAuthenticationStatusReason() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationStatusReason
}

func (t *ThreeDsAuthentication) GetEci() *string {
	if t == nil {
		return nil
	}
	return t.Eci
}

func (t *ThreeDsAuthentication) GetAcsChallengeMandated() *string {
	if t == nil {
		return nil
	}
	return t.AcsChallengeMandated
}

func (t *ThreeDsAuthentication) GetAcsDecoupledAuthentication() *string {
	if t == nil {
		return nil
	}
	return t.AcsDecoupledAuthentication
}

func (t *ThreeDsAuthentication) GetAuthenticationChallengeType() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationChallengeType
}

func (t *ThreeDsAuthentication) GetAcsRenderingType() *ThreeDsAcsRenderingType {
	if t == nil {
		return nil
	}
	return t.AcsRenderingType
}

func (t *ThreeDsAuthentication) GetAcsSignedContent() *string {
	if t == nil {
		return nil
	}
	return t.AcsSignedContent
}

func (t *ThreeDsAuthentication) GetAcsChallengeURL() *string {
	if t == nil {
		return nil
	}
	return t.AcsChallengeURL
}

func (t *ThreeDsAuthentication) GetChallengePreference() *string {
	if t == nil {
		return nil
	}
	return t.ChallengePreference
}

func (t *ThreeDsAuthentication) GetChallengePreferenceCode() *string {
	if t == nil {
		return nil
	}
	return t.ChallengePreferenceCode
}

func (t *ThreeDsAuthentication) GetChallengeAttempts() *string {
	if t == nil {
		return nil
	}
	return t.ChallengeAttempts
}

func (t *ThreeDsAuthentication) GetChallengeCancelReason() *string {
	if t == nil {
		return nil
	}
	return t.ChallengeCancelReason
}

func (t *ThreeDsAuthentication) GetChallengeCancelReasonCode() *string {
	if t == nil {
		return nil
	}
	return t.ChallengeCancelReasonCode
}

func (t *ThreeDsAuthentication) GetCardholderInfo() *string {
	if t == nil {
		return nil
	}
	return t.CardholderInfo
}

func (t *ThreeDsAuthentication) GetWhitelistStatus() *string {
	if t == nil {
		return nil
	}
	return t.WhitelistStatus
}

func (t *ThreeDsAuthentication) GetWhitelistStatusSource() *string {
	if t == nil {
		return nil
	}
	return t.WhitelistStatusSource
}

func (t *ThreeDsAuthentication) GetMessageExtensions() []*ThreeDsMessageExtension {
	if t == nil {
		return nil
	}
	return t.MessageExtensions
}

func (t *ThreeDsAuthentication) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAuthentication) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAuthentication
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAuthentication(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAuthentication) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderAccountInfo struct {
	AccountAge                 *string `json:"account_age,omitempty" url:"account_age,omitempty"`
	AccountLastChanged         *string `json:"account_last_changed,omitempty" url:"account_last_changed,omitempty"`
	AccountChangeDate          *string `json:"account_change_date,omitempty" url:"account_change_date,omitempty"`
	AccountCreatedDate         *string `json:"account_created_date,omitempty" url:"account_created_date,omitempty"`
	AccountPwdLastChanged      *string `json:"account_pwd_last_changed,omitempty" url:"account_pwd_last_changed,omitempty"`
	AccountPwdChangeDate       *string `json:"account_pwd_change_date,omitempty" url:"account_pwd_change_date,omitempty"`
	PurchaseCountHalfYear      *string `json:"purchase_count_half_year,omitempty" url:"purchase_count_half_year,omitempty"`
	TransactionCountDay        *string `json:"transaction_count_day,omitempty" url:"transaction_count_day,omitempty"`
	PaymentAccountAge          *string `json:"payment_account_age,omitempty" url:"payment_account_age,omitempty"`
	TransactionCountYear       *string `json:"transaction_count_year,omitempty" url:"transaction_count_year,omitempty"`
	PaymentAccountCreated      *string `json:"payment_account_created,omitempty" url:"payment_account_created,omitempty"`
	ShippingAddressFirstUsed   *string `json:"shipping_address_first_used,omitempty" url:"shipping_address_first_used,omitempty"`
	ShippingAddressUsageDate   *string `json:"shipping_address_usage_date,omitempty" url:"shipping_address_usage_date,omitempty"`
	ShippingAccountNameMatch   *bool   `json:"shipping_account_name_match,omitempty" url:"shipping_account_name_match,omitempty"`
	SuspiciousActivityObserved *bool   `json:"suspicious_activity_observed,omitempty" url:"suspicious_activity_observed,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsCardholderAccountInfo) GetAccountAge() *string {
	if t == nil {
		return nil
	}
	return t.AccountAge
}

func (t *ThreeDsCardholderAccountInfo) GetAccountLastChanged() *string {
	if t == nil {
		return nil
	}
	return t.AccountLastChanged
}

func (t *ThreeDsCardholderAccountInfo) GetAccountChangeDate() *string {
	if t == nil {
		return nil
	}
	return t.AccountChangeDate
}

func (t *ThreeDsCardholderAccountInfo) GetAccountCreatedDate() *string {
	if t == nil {
		return nil
	}
	return t.AccountCreatedDate
}

func (t *ThreeDsCardholderAccountInfo) GetAccountPwdLastChanged() *string {
	if t == nil {
		return nil
	}
	return t.AccountPwdLastChanged
}

func (t *ThreeDsCardholderAccountInfo) GetAccountPwdChangeDate() *string {
	if t == nil {
		return nil
	}
	return t.AccountPwdChangeDate
}

func (t *ThreeDsCardholderAccountInfo) GetPurchaseCountHalfYear() *string {
	if t == nil {
		return nil
	}
	return t.PurchaseCountHalfYear
}

func (t *ThreeDsCardholderAccountInfo) GetTransactionCountDay() *string {
	if t == nil {
		return nil
	}
	return t.TransactionCountDay
}

func (t *ThreeDsCardholderAccountInfo) GetPaymentAccountAge() *string {
	if t == nil {
		return nil
	}
	return t.PaymentAccountAge
}

func (t *ThreeDsCardholderAccountInfo) GetTransactionCountYear() *string {
	if t == nil {
		return nil
	}
	return t.TransactionCountYear
}

func (t *ThreeDsCardholderAccountInfo) GetPaymentAccountCreated() *string {
	if t == nil {
		return nil
	}
	return t.PaymentAccountCreated
}

func (t *ThreeDsCardholderAccountInfo) GetShippingAddressFirstUsed() *string {
	if t == nil {
		return nil
	}
	return t.ShippingAddressFirstUsed
}

func (t *ThreeDsCardholderAccountInfo) GetShippingAddressUsageDate() *string {
	if t == nil {
		return nil
	}
	return t.ShippingAddressUsageDate
}

func (t *ThreeDsCardholderAccountInfo) GetShippingAccountNameMatch() *bool {
	if t == nil {
		return nil
	}
	return t.ShippingAccountNameMatch
}

func (t *ThreeDsCardholderAccountInfo) GetSuspiciousActivityObserved() *bool {
	if t == nil {
		return nil
	}
	return t.SuspiciousActivityObserved
}

func (t *ThreeDsCardholderAccountInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderAccountInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderAccountInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderAccountInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderAccountInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderAuthenticationInfo struct {
	Method    *string `json:"method,omitempty" url:"method,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	Data      *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsCardholderAuthenticationInfo) GetMethod() *string {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *ThreeDsCardholderAuthenticationInfo) GetTimestamp() *string {
	if t == nil {
		return nil
	}
	return t.Timestamp
}

func (t *ThreeDsCardholderAuthenticationInfo) GetData() *string {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *ThreeDsCardholderAuthenticationInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderAuthenticationInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderAuthenticationInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderAuthenticationInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderAuthenticationInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderInfo struct {
	AccountID                   *string                              `json:"account_id,omitempty" url:"account_id,omitempty"`
	AccountType                 *string                              `json:"account_type,omitempty" url:"account_type,omitempty"`
	AccountInfo                 *ThreeDsCardholderAccountInfo        `json:"account_info,omitempty" url:"account_info,omitempty"`
	AuthenticationInfo          *ThreeDsCardholderAuthenticationInfo `json:"authentication_info,omitempty" url:"authentication_info,omitempty"`
	PriorAuthenticationInfo     *ThreeDsPriorAuthenticationInfo      `json:"prior_authentication_info,omitempty" url:"prior_authentication_info,omitempty"`
	Name                        *string                              `json:"name,omitempty" url:"name,omitempty"`
	Email                       *string                              `json:"email,omitempty" url:"email,omitempty"`
	PhoneNumber                 *ThreeDsCardholderPhoneNumber        `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	MobilePhoneNumber           *ThreeDsCardholderPhoneNumber        `json:"mobile_phone_number,omitempty" url:"mobile_phone_number,omitempty"`
	WorkPhoneNumber             *ThreeDsCardholderPhoneNumber        `json:"work_phone_number,omitempty" url:"work_phone_number,omitempty"`
	BillingShippingAddressMatch *string                              `json:"billing_shipping_address_match,omitempty" url:"billing_shipping_address_match,omitempty"`
	BillingAddress              *ThreeDsAddress                      `json:"billing_address,omitempty" url:"billing_address,omitempty"`
	ShippingAddress             *ThreeDsAddress                      `json:"shipping_address,omitempty" url:"shipping_address,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsCardholderInfo) GetAccountID() *string {
	if t == nil {
		return nil
	}
	return t.AccountID
}

func (t *ThreeDsCardholderInfo) GetAccountType() *string {
	if t == nil {
		return nil
	}
	return t.AccountType
}

func (t *ThreeDsCardholderInfo) GetAccountInfo() *ThreeDsCardholderAccountInfo {
	if t == nil {
		return nil
	}
	return t.AccountInfo
}

func (t *ThreeDsCardholderInfo) GetAuthenticationInfo() *ThreeDsCardholderAuthenticationInfo {
	if t == nil {
		return nil
	}
	return t.AuthenticationInfo
}

func (t *ThreeDsCardholderInfo) GetPriorAuthenticationInfo() *ThreeDsPriorAuthenticationInfo {
	if t == nil {
		return nil
	}
	return t.PriorAuthenticationInfo
}

func (t *ThreeDsCardholderInfo) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *ThreeDsCardholderInfo) GetEmail() *string {
	if t == nil {
		return nil
	}
	return t.Email
}

func (t *ThreeDsCardholderInfo) GetPhoneNumber() *ThreeDsCardholderPhoneNumber {
	if t == nil {
		return nil
	}
	return t.PhoneNumber
}

func (t *ThreeDsCardholderInfo) GetMobilePhoneNumber() *ThreeDsCardholderPhoneNumber {
	if t == nil {
		return nil
	}
	return t.MobilePhoneNumber
}

func (t *ThreeDsCardholderInfo) GetWorkPhoneNumber() *ThreeDsCardholderPhoneNumber {
	if t == nil {
		return nil
	}
	return t.WorkPhoneNumber
}

func (t *ThreeDsCardholderInfo) GetBillingShippingAddressMatch() *string {
	if t == nil {
		return nil
	}
	return t.BillingShippingAddressMatch
}

func (t *ThreeDsCardholderInfo) GetBillingAddress() *ThreeDsAddress {
	if t == nil {
		return nil
	}
	return t.BillingAddress
}

func (t *ThreeDsCardholderInfo) GetShippingAddress() *ThreeDsAddress {
	if t == nil {
		return nil
	}
	return t.ShippingAddress
}

func (t *ThreeDsCardholderInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderPhoneNumber struct {
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`
	Number      *string `json:"number,omitempty" url:"number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsCardholderPhoneNumber) GetCountryCode() *string {
	if t == nil {
		return nil
	}
	return t.CountryCode
}

func (t *ThreeDsCardholderPhoneNumber) GetNumber() *string {
	if t == nil {
		return nil
	}
	return t.Number
}

func (t *ThreeDsCardholderPhoneNumber) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderPhoneNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderPhoneNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderPhoneNumber(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderPhoneNumber) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsDeviceInfo struct {
	BrowserAcceptHeader      *string                        `json:"browser_accept_header,omitempty" url:"browser_accept_header,omitempty"`
	BrowserIP                *string                        `json:"browser_ip,omitempty" url:"browser_ip,omitempty"`
	BrowserJavascriptEnabled *bool                          `json:"browser_javascript_enabled,omitempty" url:"browser_javascript_enabled,omitempty"`
	BrowserJavaEnabled       *bool                          `json:"browser_java_enabled,omitempty" url:"browser_java_enabled,omitempty"`
	BrowserLanguage          *string                        `json:"browser_language,omitempty" url:"browser_language,omitempty"`
	BrowserColorDepth        *string                        `json:"browser_color_depth,omitempty" url:"browser_color_depth,omitempty"`
	BrowserScreenHeight      *string                        `json:"browser_screen_height,omitempty" url:"browser_screen_height,omitempty"`
	BrowserScreenWidth       *string                        `json:"browser_screen_width,omitempty" url:"browser_screen_width,omitempty"`
	BrowserTz                *string                        `json:"browser_tz,omitempty" url:"browser_tz,omitempty"`
	BrowserUserAgent         *string                        `json:"browser_user_agent,omitempty" url:"browser_user_agent,omitempty"`
	SdkTransactionID         *string                        `json:"sdk_transaction_id,omitempty" url:"sdk_transaction_id,omitempty"`
	SdkApplicationID         *string                        `json:"sdk_application_id,omitempty" url:"sdk_application_id,omitempty"`
	SdkEncryptionData        *string                        `json:"sdk_encryption_data,omitempty" url:"sdk_encryption_data,omitempty"`
	SdkEphemeralPublicKey    *string                        `json:"sdk_ephemeral_public_key,omitempty" url:"sdk_ephemeral_public_key,omitempty"`
	SdkMaxTimeout            *string                        `json:"sdk_max_timeout,omitempty" url:"sdk_max_timeout,omitempty"`
	SdkReferenceNumber       *string                        `json:"sdk_reference_number,omitempty" url:"sdk_reference_number,omitempty"`
	SdkRenderOptions         *ThreeDsMobileSdkRenderOptions `json:"sdk_render_options,omitempty" url:"sdk_render_options,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsDeviceInfo) GetBrowserAcceptHeader() *string {
	if t == nil {
		return nil
	}
	return t.BrowserAcceptHeader
}

func (t *ThreeDsDeviceInfo) GetBrowserIP() *string {
	if t == nil {
		return nil
	}
	return t.BrowserIP
}

func (t *ThreeDsDeviceInfo) GetBrowserJavascriptEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.BrowserJavascriptEnabled
}

func (t *ThreeDsDeviceInfo) GetBrowserJavaEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.BrowserJavaEnabled
}

func (t *ThreeDsDeviceInfo) GetBrowserLanguage() *string {
	if t == nil {
		return nil
	}
	return t.BrowserLanguage
}

func (t *ThreeDsDeviceInfo) GetBrowserColorDepth() *string {
	if t == nil {
		return nil
	}
	return t.BrowserColorDepth
}

func (t *ThreeDsDeviceInfo) GetBrowserScreenHeight() *string {
	if t == nil {
		return nil
	}
	return t.BrowserScreenHeight
}

func (t *ThreeDsDeviceInfo) GetBrowserScreenWidth() *string {
	if t == nil {
		return nil
	}
	return t.BrowserScreenWidth
}

func (t *ThreeDsDeviceInfo) GetBrowserTz() *string {
	if t == nil {
		return nil
	}
	return t.BrowserTz
}

func (t *ThreeDsDeviceInfo) GetBrowserUserAgent() *string {
	if t == nil {
		return nil
	}
	return t.BrowserUserAgent
}

func (t *ThreeDsDeviceInfo) GetSdkTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.SdkTransactionID
}

func (t *ThreeDsDeviceInfo) GetSdkApplicationID() *string {
	if t == nil {
		return nil
	}
	return t.SdkApplicationID
}

func (t *ThreeDsDeviceInfo) GetSdkEncryptionData() *string {
	if t == nil {
		return nil
	}
	return t.SdkEncryptionData
}

func (t *ThreeDsDeviceInfo) GetSdkEphemeralPublicKey() *string {
	if t == nil {
		return nil
	}
	return t.SdkEphemeralPublicKey
}

func (t *ThreeDsDeviceInfo) GetSdkMaxTimeout() *string {
	if t == nil {
		return nil
	}
	return t.SdkMaxTimeout
}

func (t *ThreeDsDeviceInfo) GetSdkReferenceNumber() *string {
	if t == nil {
		return nil
	}
	return t.SdkReferenceNumber
}

func (t *ThreeDsDeviceInfo) GetSdkRenderOptions() *ThreeDsMobileSdkRenderOptions {
	if t == nil {
		return nil
	}
	return t.SdkRenderOptions
}

func (t *ThreeDsDeviceInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsDeviceInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsDeviceInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsDeviceInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsDeviceInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMerchantInfo struct {
	Mid          *string                  `json:"mid,omitempty" url:"mid,omitempty"`
	AcquirerBin  *string                  `json:"acquirer_bin,omitempty" url:"acquirer_bin,omitempty"`
	Name         *string                  `json:"name,omitempty" url:"name,omitempty"`
	CountryCode  *string                  `json:"country_code,omitempty" url:"country_code,omitempty"`
	CategoryCode *string                  `json:"category_code,omitempty" url:"category_code,omitempty"`
	URL          *string                  `json:"url,omitempty" url:"url,omitempty"`
	RiskInfo     *ThreeDsMerchantRiskInfo `json:"risk_info,omitempty" url:"risk_info,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsMerchantInfo) GetMid() *string {
	if t == nil {
		return nil
	}
	return t.Mid
}

func (t *ThreeDsMerchantInfo) GetAcquirerBin() *string {
	if t == nil {
		return nil
	}
	return t.AcquirerBin
}

func (t *ThreeDsMerchantInfo) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *ThreeDsMerchantInfo) GetCountryCode() *string {
	if t == nil {
		return nil
	}
	return t.CountryCode
}

func (t *ThreeDsMerchantInfo) GetCategoryCode() *string {
	if t == nil {
		return nil
	}
	return t.CategoryCode
}

func (t *ThreeDsMerchantInfo) GetURL() *string {
	if t == nil {
		return nil
	}
	return t.URL
}

func (t *ThreeDsMerchantInfo) GetRiskInfo() *ThreeDsMerchantRiskInfo {
	if t == nil {
		return nil
	}
	return t.RiskInfo
}

func (t *ThreeDsMerchantInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMerchantInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMerchantInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMerchantInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMerchantInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMerchantRiskInfo struct {
	DeliveryEmail     *string `json:"delivery_email,omitempty" url:"delivery_email,omitempty"`
	DeliveryTimeFrame *string `json:"delivery_time_frame,omitempty" url:"delivery_time_frame,omitempty"`
	GiftCardAmount    *string `json:"gift_card_amount,omitempty" url:"gift_card_amount,omitempty"`
	GiftCardCount     *string `json:"gift_card_count,omitempty" url:"gift_card_count,omitempty"`
	GiftCardCurrency  *string `json:"gift_card_currency,omitempty" url:"gift_card_currency,omitempty"`
	PreOrderPurchase  *bool   `json:"pre_order_purchase,omitempty" url:"pre_order_purchase,omitempty"`
	PreOrderDate      *string `json:"pre_order_date,omitempty" url:"pre_order_date,omitempty"`
	ReorderedPurchase *bool   `json:"reordered_purchase,omitempty" url:"reordered_purchase,omitempty"`
	ShippingMethod    *string `json:"shipping_method,omitempty" url:"shipping_method,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsMerchantRiskInfo) GetDeliveryEmail() *string {
	if t == nil {
		return nil
	}
	return t.DeliveryEmail
}

func (t *ThreeDsMerchantRiskInfo) GetDeliveryTimeFrame() *string {
	if t == nil {
		return nil
	}
	return t.DeliveryTimeFrame
}

func (t *ThreeDsMerchantRiskInfo) GetGiftCardAmount() *string {
	if t == nil {
		return nil
	}
	return t.GiftCardAmount
}

func (t *ThreeDsMerchantRiskInfo) GetGiftCardCount() *string {
	if t == nil {
		return nil
	}
	return t.GiftCardCount
}

func (t *ThreeDsMerchantRiskInfo) GetGiftCardCurrency() *string {
	if t == nil {
		return nil
	}
	return t.GiftCardCurrency
}

func (t *ThreeDsMerchantRiskInfo) GetPreOrderPurchase() *bool {
	if t == nil {
		return nil
	}
	return t.PreOrderPurchase
}

func (t *ThreeDsMerchantRiskInfo) GetPreOrderDate() *string {
	if t == nil {
		return nil
	}
	return t.PreOrderDate
}

func (t *ThreeDsMerchantRiskInfo) GetReorderedPurchase() *bool {
	if t == nil {
		return nil
	}
	return t.ReorderedPurchase
}

func (t *ThreeDsMerchantRiskInfo) GetShippingMethod() *string {
	if t == nil {
		return nil
	}
	return t.ShippingMethod
}

func (t *ThreeDsMerchantRiskInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMerchantRiskInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMerchantRiskInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMerchantRiskInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMerchantRiskInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMessageExtension struct {
	ID       *string     `json:"id,omitempty" url:"id,omitempty"`
	Name     *string     `json:"name,omitempty" url:"name,omitempty"`
	Critical *bool       `json:"critical,omitempty" url:"critical,omitempty"`
	Data     interface{} `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsMessageExtension) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *ThreeDsMessageExtension) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *ThreeDsMessageExtension) GetCritical() *bool {
	if t == nil {
		return nil
	}
	return t.Critical
}

func (t *ThreeDsMessageExtension) GetData() interface{} {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *ThreeDsMessageExtension) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMessageExtension) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMessageExtension
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMessageExtension(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMessageExtension) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMethod struct {
	MethodURL                 *string `json:"method_url,omitempty" url:"method_url,omitempty"`
	MethodCompletionIndicator *string `json:"method_completion_indicator,omitempty" url:"method_completion_indicator,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsMethod) GetMethodURL() *string {
	if t == nil {
		return nil
	}
	return t.MethodURL
}

func (t *ThreeDsMethod) GetMethodCompletionIndicator() *string {
	if t == nil {
		return nil
	}
	return t.MethodCompletionIndicator
}

func (t *ThreeDsMethod) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMethod) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMobileSdkRenderOptions struct {
	SdkInterface *string  `json:"sdk_interface,omitempty" url:"sdk_interface,omitempty"`
	SdkUIType    []string `json:"sdk_ui_type,omitempty" url:"sdk_ui_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsMobileSdkRenderOptions) GetSdkInterface() *string {
	if t == nil {
		return nil
	}
	return t.SdkInterface
}

func (t *ThreeDsMobileSdkRenderOptions) GetSdkUIType() []string {
	if t == nil {
		return nil
	}
	return t.SdkUIType
}

func (t *ThreeDsMobileSdkRenderOptions) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMobileSdkRenderOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMobileSdkRenderOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMobileSdkRenderOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMobileSdkRenderOptions) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsPriorAuthenticationInfo struct {
	Method      *string `json:"method,omitempty" url:"method,omitempty"`
	Timestamp   *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	ReferenceID *string `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	Data        *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsPriorAuthenticationInfo) GetMethod() *string {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *ThreeDsPriorAuthenticationInfo) GetTimestamp() *string {
	if t == nil {
		return nil
	}
	return t.Timestamp
}

func (t *ThreeDsPriorAuthenticationInfo) GetReferenceID() *string {
	if t == nil {
		return nil
	}
	return t.ReferenceID
}

func (t *ThreeDsPriorAuthenticationInfo) GetData() *string {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *ThreeDsPriorAuthenticationInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsPriorAuthenticationInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsPriorAuthenticationInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsPriorAuthenticationInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsPriorAuthenticationInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsPurchaseInfo struct {
	Amount              *string `json:"amount,omitempty" url:"amount,omitempty"`
	Currency            *string `json:"currency,omitempty" url:"currency,omitempty"`
	Exponent            *string `json:"exponent,omitempty" url:"exponent,omitempty"`
	Date                *string `json:"date,omitempty" url:"date,omitempty"`
	TransactionType     *string `json:"transaction_type,omitempty" url:"transaction_type,omitempty"`
	InstallmentCount    *string `json:"installment_count,omitempty" url:"installment_count,omitempty"`
	RecurringExpiration *string `json:"recurring_expiration,omitempty" url:"recurring_expiration,omitempty"`
	RecurringFrequency  *string `json:"recurring_frequency,omitempty" url:"recurring_frequency,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsPurchaseInfo) GetAmount() *string {
	if t == nil {
		return nil
	}
	return t.Amount
}

func (t *ThreeDsPurchaseInfo) GetCurrency() *string {
	if t == nil {
		return nil
	}
	return t.Currency
}

func (t *ThreeDsPurchaseInfo) GetExponent() *string {
	if t == nil {
		return nil
	}
	return t.Exponent
}

func (t *ThreeDsPurchaseInfo) GetDate() *string {
	if t == nil {
		return nil
	}
	return t.Date
}

func (t *ThreeDsPurchaseInfo) GetTransactionType() *string {
	if t == nil {
		return nil
	}
	return t.TransactionType
}

func (t *ThreeDsPurchaseInfo) GetInstallmentCount() *string {
	if t == nil {
		return nil
	}
	return t.InstallmentCount
}

func (t *ThreeDsPurchaseInfo) GetRecurringExpiration() *string {
	if t == nil {
		return nil
	}
	return t.RecurringExpiration
}

func (t *ThreeDsPurchaseInfo) GetRecurringFrequency() *string {
	if t == nil {
		return nil
	}
	return t.RecurringFrequency
}

func (t *ThreeDsPurchaseInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsPurchaseInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsPurchaseInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsPurchaseInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsPurchaseInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsRequestorInfo struct {
	ID                  *string `json:"id,omitempty" url:"id,omitempty"`
	Name                *string `json:"name,omitempty" url:"name,omitempty"`
	URL                 *string `json:"url,omitempty" url:"url,omitempty"`
	DiscoverClientID    *string `json:"discover_client_id,omitempty" url:"discover_client_id,omitempty"`
	DiscoverRequestorID *string `json:"discover_requestor_id,omitempty" url:"discover_requestor_id,omitempty"`
	AmexRequestorType   *string `json:"amex_requestor_type,omitempty" url:"amex_requestor_type,omitempty"`
	CbSiretNumber       *string `json:"cb_siret_number,omitempty" url:"cb_siret_number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsRequestorInfo) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *ThreeDsRequestorInfo) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *ThreeDsRequestorInfo) GetURL() *string {
	if t == nil {
		return nil
	}
	return t.URL
}

func (t *ThreeDsRequestorInfo) GetDiscoverClientID() *string {
	if t == nil {
		return nil
	}
	return t.DiscoverClientID
}

func (t *ThreeDsRequestorInfo) GetDiscoverRequestorID() *string {
	if t == nil {
		return nil
	}
	return t.DiscoverRequestorID
}

func (t *ThreeDsRequestorInfo) GetAmexRequestorType() *string {
	if t == nil {
		return nil
	}
	return t.AmexRequestorType
}

func (t *ThreeDsRequestorInfo) GetCbSiretNumber() *string {
	if t == nil {
		return nil
	}
	return t.CbSiretNumber
}

func (t *ThreeDsRequestorInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsRequestorInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsRequestorInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsRequestorInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsRequestorInfo) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsSession struct {
	ID               *string                `json:"id,omitempty" url:"id,omitempty"`
	Type             *string                `json:"type,omitempty" url:"type,omitempty"`
	TenantID         *string                `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	PanTokenID       *string                `json:"pan_token_id,omitempty" url:"pan_token_id,omitempty"`
	TokenID          *string                `json:"token_id,omitempty" url:"token_id,omitempty"`
	TokenIntentID    *string                `json:"token_intent_id,omitempty" url:"token_intent_id,omitempty"`
	CardBrand        *string                `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	ExpirationDate   *time.Time             `json:"expiration_date,omitempty" url:"expiration_date,omitempty"`
	CreatedDate      *time.Time             `json:"created_date,omitempty" url:"created_date,omitempty"`
	CreatedBy        *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	ModifiedDate     *time.Time             `json:"modified_date,omitempty" url:"modified_date,omitempty"`
	ModifiedBy       *string                `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	Device           *string                `json:"device,omitempty" url:"device,omitempty"`
	DeviceInfo       *ThreeDsDeviceInfo     `json:"device_info,omitempty" url:"device_info,omitempty"`
	WebChallengeMode *string                `json:"web_challenge_mode,omitempty" url:"web_challenge_mode,omitempty"`
	Version          *ThreeDsVersion        `json:"version,omitempty" url:"version,omitempty"`
	Method           *ThreeDsMethod         `json:"method,omitempty" url:"method,omitempty"`
	Authentication   *ThreeDsAuthentication `json:"authentication,omitempty" url:"authentication,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsSession) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *ThreeDsSession) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *ThreeDsSession) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *ThreeDsSession) GetPanTokenID() *string {
	if t == nil {
		return nil
	}
	return t.PanTokenID
}

func (t *ThreeDsSession) GetTokenID() *string {
	if t == nil {
		return nil
	}
	return t.TokenID
}

func (t *ThreeDsSession) GetTokenIntentID() *string {
	if t == nil {
		return nil
	}
	return t.TokenIntentID
}

func (t *ThreeDsSession) GetCardBrand() *string {
	if t == nil {
		return nil
	}
	return t.CardBrand
}

func (t *ThreeDsSession) GetExpirationDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.ExpirationDate
}

func (t *ThreeDsSession) GetCreatedDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedDate
}

func (t *ThreeDsSession) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *ThreeDsSession) GetModifiedDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedDate
}

func (t *ThreeDsSession) GetModifiedBy() *string {
	if t == nil {
		return nil
	}
	return t.ModifiedBy
}

func (t *ThreeDsSession) GetDevice() *string {
	if t == nil {
		return nil
	}
	return t.Device
}

func (t *ThreeDsSession) GetDeviceInfo() *ThreeDsDeviceInfo {
	if t == nil {
		return nil
	}
	return t.DeviceInfo
}

func (t *ThreeDsSession) GetWebChallengeMode() *string {
	if t == nil {
		return nil
	}
	return t.WebChallengeMode
}

func (t *ThreeDsSession) GetVersion() *ThreeDsVersion {
	if t == nil {
		return nil
	}
	return t.Version
}

func (t *ThreeDsSession) GetMethod() *ThreeDsMethod {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *ThreeDsSession) GetAuthentication() *ThreeDsAuthentication {
	if t == nil {
		return nil
	}
	return t.Authentication
}

func (t *ThreeDsSession) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsSession) UnmarshalJSON(data []byte) error {
	type embed ThreeDsSession
	var unmarshaler = struct {
		embed
		ExpirationDate *internal.DateTime `json:"expiration_date,omitempty"`
		CreatedDate    *internal.DateTime `json:"created_date,omitempty"`
		ModifiedDate   *internal.DateTime `json:"modified_date,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = ThreeDsSession(unmarshaler.embed)
	t.ExpirationDate = unmarshaler.ExpirationDate.TimePtr()
	t.CreatedDate = unmarshaler.CreatedDate.TimePtr()
	t.ModifiedDate = unmarshaler.ModifiedDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsSession) MarshalJSON() ([]byte, error) {
	type embed ThreeDsSession
	var marshaler = struct {
		embed
		ExpirationDate *internal.DateTime `json:"expiration_date,omitempty"`
		CreatedDate    *internal.DateTime `json:"created_date,omitempty"`
		ModifiedDate   *internal.DateTime `json:"modified_date,omitempty"`
	}{
		embed:          embed(*t),
		ExpirationDate: internal.NewOptionalDateTime(t.ExpirationDate),
		CreatedDate:    internal.NewOptionalDateTime(t.CreatedDate),
		ModifiedDate:   internal.NewOptionalDateTime(t.ModifiedDate),
	}
	return json.Marshal(marshaler)
}

func (t *ThreeDsSession) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsVersion struct {
	RecommendedVersion          *string  `json:"recommended_version,omitempty" url:"recommended_version,omitempty"`
	AvailableVersions           []string `json:"available_versions,omitempty" url:"available_versions,omitempty"`
	EarliestAcsSupportedVersion *string  `json:"earliest_acs_supported_version,omitempty" url:"earliest_acs_supported_version,omitempty"`
	EarliestDsSupportedVersion  *string  `json:"earliest_ds_supported_version,omitempty" url:"earliest_ds_supported_version,omitempty"`
	LatestAcsSupportedVersion   *string  `json:"latest_acs_supported_version,omitempty" url:"latest_acs_supported_version,omitempty"`
	LatestDsSupportedVersion    *string  `json:"latest_ds_supported_version,omitempty" url:"latest_ds_supported_version,omitempty"`
	AcsInformation              []string `json:"acs_information,omitempty" url:"acs_information,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreeDsVersion) GetRecommendedVersion() *string {
	if t == nil {
		return nil
	}
	return t.RecommendedVersion
}

func (t *ThreeDsVersion) GetAvailableVersions() []string {
	if t == nil {
		return nil
	}
	return t.AvailableVersions
}

func (t *ThreeDsVersion) GetEarliestAcsSupportedVersion() *string {
	if t == nil {
		return nil
	}
	return t.EarliestAcsSupportedVersion
}

func (t *ThreeDsVersion) GetEarliestDsSupportedVersion() *string {
	if t == nil {
		return nil
	}
	return t.EarliestDsSupportedVersion
}

func (t *ThreeDsVersion) GetLatestAcsSupportedVersion() *string {
	if t == nil {
		return nil
	}
	return t.LatestAcsSupportedVersion
}

func (t *ThreeDsVersion) GetLatestDsSupportedVersion() *string {
	if t == nil {
		return nil
	}
	return t.LatestDsSupportedVersion
}

func (t *ThreeDsVersion) GetAcsInformation() []string {
	if t == nil {
		return nil
	}
	return t.AcsInformation
}

func (t *ThreeDsVersion) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsVersion) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsVersion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsVersion(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsVersion) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Token struct {
	ID                    *string            `json:"id,omitempty" url:"id,omitempty"`
	Type                  *string            `json:"type,omitempty" url:"type,omitempty"`
	TenantID              *string            `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Data                  interface{}        `json:"data,omitempty" url:"data,omitempty"`
	Metadata              map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	Enrichments           *TokenEnrichments  `json:"enrichments,omitempty" url:"enrichments,omitempty"`
	CreatedBy             *string            `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt             *time.Time         `json:"created_at,omitempty" url:"created_at,omitempty"`
	Card                  *CardDetails       `json:"card,omitempty" url:"card,omitempty"`
	Bank                  *BankDetails       `json:"bank,omitempty" url:"bank,omitempty"`
	NetworkToken          *CardDetails       `json:"network_token,omitempty" url:"network_token,omitempty"`
	ModifiedBy            *string            `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt            *time.Time         `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Fingerprint           *string            `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	FingerprintExpression *string            `json:"fingerprint_expression,omitempty" url:"fingerprint_expression,omitempty"`
	Mask                  interface{}        `json:"mask,omitempty" url:"mask,omitempty"`
	Privacy               *Privacy           `json:"privacy,omitempty" url:"privacy,omitempty"`
	SearchIndexes         []string           `json:"search_indexes,omitempty" url:"search_indexes,omitempty"`
	ExpiresAt             *time.Time         `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Containers            []string           `json:"containers,omitempty" url:"containers,omitempty"`
	Aliases               []string           `json:"aliases,omitempty" url:"aliases,omitempty"`
	Authentication        interface{}        `json:"authentication,omitempty" url:"authentication,omitempty"`
	Extras                *TokenExtras       `json:"_extras,omitempty" url:"_extras,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Token) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *Token) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *Token) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *Token) GetData() interface{} {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *Token) GetMetadata() map[string]*string {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *Token) GetEnrichments() *TokenEnrichments {
	if t == nil {
		return nil
	}
	return t.Enrichments
}

func (t *Token) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *Token) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *Token) GetCard() *CardDetails {
	if t == nil {
		return nil
	}
	return t.Card
}

func (t *Token) GetBank() *BankDetails {
	if t == nil {
		return nil
	}
	return t.Bank
}

func (t *Token) GetNetworkToken() *CardDetails {
	if t == nil {
		return nil
	}
	return t.NetworkToken
}

func (t *Token) GetModifiedBy() *string {
	if t == nil {
		return nil
	}
	return t.ModifiedBy
}

func (t *Token) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *Token) GetFingerprint() *string {
	if t == nil {
		return nil
	}
	return t.Fingerprint
}

func (t *Token) GetFingerprintExpression() *string {
	if t == nil {
		return nil
	}
	return t.FingerprintExpression
}

func (t *Token) GetMask() interface{} {
	if t == nil {
		return nil
	}
	return t.Mask
}

func (t *Token) GetPrivacy() *Privacy {
	if t == nil {
		return nil
	}
	return t.Privacy
}

func (t *Token) GetSearchIndexes() []string {
	if t == nil {
		return nil
	}
	return t.SearchIndexes
}

func (t *Token) GetExpiresAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ExpiresAt
}

func (t *Token) GetContainers() []string {
	if t == nil {
		return nil
	}
	return t.Containers
}

func (t *Token) GetAliases() []string {
	if t == nil {
		return nil
	}
	return t.Aliases
}

func (t *Token) GetAuthentication() interface{} {
	if t == nil {
		return nil
	}
	return t.Authentication
}

func (t *Token) GetExtras() *TokenExtras {
	if t == nil {
		return nil
	}
	return t.Extras
}

func (t *Token) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Token) UnmarshalJSON(data []byte) error {
	type embed Token
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Token(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	t.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Token) MarshalJSON() ([]byte, error) {
	type embed Token
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
		ExpiresAt:  internal.NewOptionalDateTime(t.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (t *Token) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenEnrichments struct {
	BinDetails  *BinDetails                  `json:"bin_details,omitempty" url:"bin_details,omitempty"`
	CardDetails *TokenEnrichmentsCardDetails `json:"card_details,omitempty" url:"card_details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenEnrichments) GetBinDetails() *BinDetails {
	if t == nil {
		return nil
	}
	return t.BinDetails
}

func (t *TokenEnrichments) GetCardDetails() *TokenEnrichmentsCardDetails {
	if t == nil {
		return nil
	}
	return t.CardDetails
}

func (t *TokenEnrichments) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenEnrichments) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenEnrichments
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenEnrichments(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenEnrichments) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenEnrichmentsCardDetails struct {
	Bin   *string `json:"bin,omitempty" url:"bin,omitempty"`
	Last4 *string `json:"last4,omitempty" url:"last4,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenEnrichmentsCardDetails) GetBin() *string {
	if t == nil {
		return nil
	}
	return t.Bin
}

func (t *TokenEnrichmentsCardDetails) GetLast4() *string {
	if t == nil {
		return nil
	}
	return t.Last4
}

func (t *TokenEnrichmentsCardDetails) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenEnrichmentsCardDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenEnrichmentsCardDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenEnrichmentsCardDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenEnrichmentsCardDetails) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenExtras struct {
	Deduplicated          *bool                        `json:"deduplicated,omitempty" url:"deduplicated,omitempty"`
	TspDetails            *TokenServiceProviderDetails `json:"tsp_details,omitempty" url:"tsp_details,omitempty"`
	DeduplicationBehavior *string                      `json:"deduplication_behavior,omitempty" url:"deduplication_behavior,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenExtras) GetDeduplicated() *bool {
	if t == nil {
		return nil
	}
	return t.Deduplicated
}

func (t *TokenExtras) GetTspDetails() *TokenServiceProviderDetails {
	if t == nil {
		return nil
	}
	return t.TspDetails
}

func (t *TokenExtras) GetDeduplicationBehavior() *string {
	if t == nil {
		return nil
	}
	return t.DeduplicationBehavior
}

func (t *TokenExtras) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenExtras) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenExtras
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenExtras(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenExtras) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenIntentExtras struct {
	TspDetails *TokenServiceProviderDetails `json:"tsp_details,omitempty" url:"tsp_details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenIntentExtras) GetTspDetails() *TokenServiceProviderDetails {
	if t == nil {
		return nil
	}
	return t.TspDetails
}

func (t *TokenIntentExtras) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenIntentExtras) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenIntentExtras
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenIntentExtras(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenIntentExtras) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenServiceProviderDetails struct {
	Tsp                          *string                   `json:"tsp,omitempty" url:"tsp,omitempty"`
	AuthMethod                   *string                   `json:"auth_method,omitempty" url:"auth_method,omitempty"`
	MessageID                    *string                   `json:"message_id,omitempty" url:"message_id,omitempty"`
	EciIndicator                 *string                   `json:"eci_indicator,omitempty" url:"eci_indicator,omitempty"`
	AssuranceDetails             *AssuranceDetails         `json:"assurance_details,omitempty" url:"assurance_details,omitempty"`
	TransactionID                *string                   `json:"transaction_id,omitempty" url:"transaction_id,omitempty"`
	CurrencyCode                 *string                   `json:"currency_code,omitempty" url:"currency_code,omitempty"`
	TransactionAmount            *int64                    `json:"transaction_amount,omitempty" url:"transaction_amount,omitempty"`
	CardholderName               *string                   `json:"cardholder_name,omitempty" url:"cardholder_name,omitempty"`
	DeviceManufacturerIdentifier *string                   `json:"device_manufacturer_identifier,omitempty" url:"device_manufacturer_identifier,omitempty"`
	PaymentDataType              *string                   `json:"payment_data_type,omitempty" url:"payment_data_type,omitempty"`
	MerchantTokenIdentifier      *string                   `json:"merchant_token_identifier,omitempty" url:"merchant_token_identifier,omitempty"`
	AuthenticationResponses      []*AuthenticationResponse `json:"authentication_responses,omitempty" url:"authentication_responses,omitempty"`
	Status                       *string                   `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenServiceProviderDetails) GetTsp() *string {
	if t == nil {
		return nil
	}
	return t.Tsp
}

func (t *TokenServiceProviderDetails) GetAuthMethod() *string {
	if t == nil {
		return nil
	}
	return t.AuthMethod
}

func (t *TokenServiceProviderDetails) GetMessageID() *string {
	if t == nil {
		return nil
	}
	return t.MessageID
}

func (t *TokenServiceProviderDetails) GetEciIndicator() *string {
	if t == nil {
		return nil
	}
	return t.EciIndicator
}

func (t *TokenServiceProviderDetails) GetAssuranceDetails() *AssuranceDetails {
	if t == nil {
		return nil
	}
	return t.AssuranceDetails
}

func (t *TokenServiceProviderDetails) GetTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.TransactionID
}

func (t *TokenServiceProviderDetails) GetCurrencyCode() *string {
	if t == nil {
		return nil
	}
	return t.CurrencyCode
}

func (t *TokenServiceProviderDetails) GetTransactionAmount() *int64 {
	if t == nil {
		return nil
	}
	return t.TransactionAmount
}

func (t *TokenServiceProviderDetails) GetCardholderName() *string {
	if t == nil {
		return nil
	}
	return t.CardholderName
}

func (t *TokenServiceProviderDetails) GetDeviceManufacturerIdentifier() *string {
	if t == nil {
		return nil
	}
	return t.DeviceManufacturerIdentifier
}

func (t *TokenServiceProviderDetails) GetPaymentDataType() *string {
	if t == nil {
		return nil
	}
	return t.PaymentDataType
}

func (t *TokenServiceProviderDetails) GetMerchantTokenIdentifier() *string {
	if t == nil {
		return nil
	}
	return t.MerchantTokenIdentifier
}

func (t *TokenServiceProviderDetails) GetAuthenticationResponses() []*AuthenticationResponse {
	if t == nil {
		return nil
	}
	return t.AuthenticationResponses
}

func (t *TokenServiceProviderDetails) GetStatus() *string {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TokenServiceProviderDetails) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenServiceProviderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenServiceProviderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenServiceProviderDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenServiceProviderDetails) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateReactorFormulaRequest struct {
	Type              string                            `json:"type" url:"type"`
	Name              string                            `json:"name" url:"name"`
	Description       *string                           `json:"description,omitempty" url:"description,omitempty"`
	Icon              *string                           `json:"icon,omitempty" url:"icon,omitempty"`
	Code              *string                           `json:"code,omitempty" url:"code,omitempty"`
	Configuration     []*ReactorFormulaConfiguration    `json:"configuration,omitempty" url:"configuration,omitempty"`
	RequestParameters []*ReactorFormulaRequestParameter `json:"request_parameters,omitempty" url:"request_parameters,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateReactorFormulaRequest) GetType() string {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdateReactorFormulaRequest) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateReactorFormulaRequest) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateReactorFormulaRequest) GetIcon() *string {
	if u == nil {
		return nil
	}
	return u.Icon
}

func (u *UpdateReactorFormulaRequest) GetCode() *string {
	if u == nil {
		return nil
	}
	return u.Code
}

func (u *UpdateReactorFormulaRequest) GetConfiguration() []*ReactorFormulaConfiguration {
	if u == nil {
		return nil
	}
	return u.Configuration
}

func (u *UpdateReactorFormulaRequest) GetRequestParameters() []*ReactorFormulaRequestParameter {
	if u == nil {
		return nil
	}
	return u.RequestParameters
}

func (u *UpdateReactorFormulaRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateReactorFormulaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateReactorFormulaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateReactorFormulaRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateReactorFormulaRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type User struct {
	ID          *string `json:"id,omitempty" url:"id,omitempty"`
	Email       *string `json:"email,omitempty" url:"email,omitempty"`
	Provider    *string `json:"provider,omitempty" url:"provider,omitempty"`
	MfaEnrolled *bool   `json:"mfa_enrolled,omitempty" url:"mfa_enrolled,omitempty"`
	FirstName   *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName    *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	Picture     *string `json:"picture,omitempty" url:"picture,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetProvider() *string {
	if u == nil {
		return nil
	}
	return u.Provider
}

func (u *User) GetMfaEnrolled() *bool {
	if u == nil {
		return nil
	}
	return u.MfaEnrolled
}

func (u *User) GetFirstName() *string {
	if u == nil {
		return nil
	}
	return u.FirstName
}

func (u *User) GetLastName() *string {
	if u == nil {
		return nil
	}
	return u.LastName
}

func (u *User) GetPicture() *string {
	if u == nil {
		return nil
	}
	return u.Picture
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationProblemDetails struct {
	Errors   map[string][]string `json:"errors,omitempty" url:"errors,omitempty"`
	Type     *string             `json:"type,omitempty" url:"type,omitempty"`
	Title    *string             `json:"title,omitempty" url:"title,omitempty"`
	Status   *int                `json:"status,omitempty" url:"status,omitempty"`
	Detail   *string             `json:"detail,omitempty" url:"detail,omitempty"`
	Instance *string             `json:"instance,omitempty" url:"instance,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (v *ValidationProblemDetails) GetErrors() map[string][]string {
	if v == nil {
		return nil
	}
	return v.Errors
}

func (v *ValidationProblemDetails) GetType() *string {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *ValidationProblemDetails) GetTitle() *string {
	if v == nil {
		return nil
	}
	return v.Title
}

func (v *ValidationProblemDetails) GetStatus() *int {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *ValidationProblemDetails) GetDetail() *string {
	if v == nil {
		return nil
	}
	return v.Detail
}

func (v *ValidationProblemDetails) GetInstance() *string {
	if v == nil {
		return nil
	}
	return v.Instance
}

func (v *ValidationProblemDetails) GetExtraProperties() map[string]interface{} {
	return v.ExtraProperties
}

func (v *ValidationProblemDetails) UnmarshalJSON(data []byte) error {
	type embed ValidationProblemDetails
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValidationProblemDetails(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.ExtraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemDetails) MarshalJSON() ([]byte, error) {
	type embed ValidationProblemDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, v.ExtraProperties)
}

func (v *ValidationProblemDetails) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
