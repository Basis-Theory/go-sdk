// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/Basis-Theory/go-sdk/core"
	time "time"
)

type AccessRule struct {
	Description *string      `json:"description,omitempty" url:"description,omitempty"`
	Priority    *int         `json:"priority,omitempty" url:"priority,omitempty"`
	Container   *string      `json:"container,omitempty" url:"container,omitempty"`
	Transform   *string      `json:"transform,omitempty" url:"transform,omitempty"`
	Conditions  []*Condition `json:"conditions,omitempty" url:"conditions,omitempty"`
	Permissions []string     `json:"permissions,omitempty" url:"permissions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AccessRule) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessRule) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessRule(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessRule) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AdditionalCardDetails struct {
	Brand          *string `json:"brand,omitempty" url:"brand,omitempty"`
	Funding        *string `json:"funding,omitempty" url:"funding,omitempty"`
	Authentication *string `json:"authentication,omitempty" url:"authentication,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdditionalCardDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdditionalCardDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AdditionalCardDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdditionalCardDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdditionalCardDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Application struct {
	ID          *string           `json:"id,omitempty" url:"id,omitempty"`
	TenantID    *string           `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Name        *string           `json:"name,omitempty" url:"name,omitempty"`
	Key         *string           `json:"key,omitempty" url:"key,omitempty"`
	Keys        []*ApplicationKey `json:"keys,omitempty" url:"keys,omitempty"`
	Type        *string           `json:"type,omitempty" url:"type,omitempty"`
	CreatedBy   *string           `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt   *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy  *string           `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt  *time.Time        `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	ExpiresAt   *time.Time        `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Permissions []string          `json:"permissions,omitempty" url:"permissions,omitempty"`
	Rules       []*AccessRule     `json:"rules,omitempty" url:"rules,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *Application) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Application) UnmarshalJSON(data []byte) error {
	type embed Application
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
		ExpiresAt  *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Application(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	a.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Application) MarshalJSON() ([]byte, error) {
	type embed Application
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
		ExpiresAt  *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  core.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: core.NewOptionalDateTime(a.ModifiedAt),
		ExpiresAt:  core.NewOptionalDateTime(a.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (a *Application) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationKey struct {
	ID        *string    `json:"id,omitempty" url:"id,omitempty"`
	Key       *string    `json:"key,omitempty" url:"key,omitempty"`
	Version   *string    `json:"version,omitempty" url:"version,omitempty"`
	CreatedBy *string    `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApplicationKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationKey) UnmarshalJSON(data []byte) error {
	type embed ApplicationKey
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApplicationKey(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationKey) MarshalJSON() ([]byte, error) {
	type embed ApplicationKey
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewOptionalDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ApplicationKey) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssuranceDetails struct {
	AccountVerified         *bool `json:"account_verified,omitempty" url:"account_verified,omitempty"`
	CardHolderAuthenticated *bool `json:"card_holder_authenticated,omitempty" url:"card_holder_authenticated,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AssuranceDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssuranceDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AssuranceDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssuranceDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssuranceDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CardDetails struct {
	Bin             *string                  `json:"bin,omitempty" url:"bin,omitempty"`
	Last4           *string                  `json:"last4,omitempty" url:"last4,omitempty"`
	ExpirationMonth *int                     `json:"expiration_month,omitempty" url:"expiration_month,omitempty"`
	ExpirationYear  *int                     `json:"expiration_year,omitempty" url:"expiration_year,omitempty"`
	Brand           *string                  `json:"brand,omitempty" url:"brand,omitempty"`
	Funding         *string                  `json:"funding,omitempty" url:"funding,omitempty"`
	Authentication  *string                  `json:"authentication,omitempty" url:"authentication,omitempty"`
	Additional      []*AdditionalCardDetails `json:"additional,omitempty" url:"additional,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CardDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CardDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardDetails) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Condition struct {
	Attribute *string `json:"attribute,omitempty" url:"attribute,omitempty"`
	Operator  *string `json:"operator,omitempty" url:"operator,omitempty"`
	Value     *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *Condition) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Condition) UnmarshalJSON(data []byte) error {
	type unmarshaler Condition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Condition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Condition) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateReactorFormulaRequest struct {
	ID                *string                           `json:"id,omitempty" url:"id,omitempty"`
	Type              string                            `json:"type" url:"type"`
	Name              string                            `json:"name" url:"name"`
	Description       *string                           `json:"description,omitempty" url:"description,omitempty"`
	Icon              *string                           `json:"icon,omitempty" url:"icon,omitempty"`
	Code              *string                           `json:"code,omitempty" url:"code,omitempty"`
	Configuration     []*ReactorFormulaConfiguration    `json:"configuration,omitempty" url:"configuration,omitempty"`
	RequestParameters []*ReactorFormulaRequestParameter `json:"request_parameters,omitempty" url:"request_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateReactorFormulaRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateReactorFormulaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateReactorFormulaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateReactorFormulaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateReactorFormulaRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTenantConnectionResponse struct {
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTenantConnectionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTenantConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTenantConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTenantConnectionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTenantConnectionResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateThreeDsSessionResponse struct {
	ID                    *string `json:"id,omitempty" url:"id,omitempty"`
	Type                  *string `json:"type,omitempty" url:"type,omitempty"`
	CardBrand             *string `json:"cardBrand,omitempty" url:"cardBrand,omitempty"`
	MethodURL             *string `json:"method_url,omitempty" url:"method_url,omitempty"`
	MethodNotificationURL *string `json:"method_notification_url,omitempty" url:"method_notification_url,omitempty"`
	DirectoryServerID     *string `json:"directory_server_id,omitempty" url:"directory_server_id,omitempty"`
	RecommendedVersion    *string `json:"recommended_version,omitempty" url:"recommended_version,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateThreeDsSessionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateThreeDsSessionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateThreeDsSessionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateThreeDsSessionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateThreeDsSessionResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTokenIntentResponse struct {
	ID             *string              `json:"id,omitempty" url:"id,omitempty"`
	Type           *string              `json:"type,omitempty" url:"type,omitempty"`
	TenantID       *string              `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Fingerprint    *string              `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	CreatedBy      *string              `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt      *time.Time           `json:"created_at,omitempty" url:"created_at,omitempty"`
	ExpiresAt      *time.Time           `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Card           *CardDetails         `json:"card,omitempty" url:"card,omitempty"`
	Authentication *TokenAuthentication `json:"authentication,omitempty" url:"authentication,omitempty"`
	Extras         *TokenIntentExtras   `json:"_extras,omitempty" url:"_extras,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTokenIntentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTokenIntentResponse) UnmarshalJSON(data []byte) error {
	type embed CreateTokenIntentResponse
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		ExpiresAt *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateTokenIntentResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTokenIntentResponse) MarshalJSON() ([]byte, error) {
	type embed CreateTokenIntentResponse
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		ExpiresAt *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewOptionalDateTime(c.CreatedAt),
		ExpiresAt: core.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateTokenIntentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EventTypes = []string

type GetApplications struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Type  []string `json:"type,omitempty" url:"type,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetApplications) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetApplications) UnmarshalJSON(data []byte) error {
	type unmarshaler GetApplications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetApplications(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetApplications) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetLogs struct {
	EntityType *string    `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	EntityID   *string    `json:"entity_id,omitempty" url:"entity_id,omitempty"`
	StartDate  *time.Time `json:"start_date,omitempty" url:"start_date,omitempty"`
	EndDate    *time.Time `json:"end_date,omitempty" url:"end_date,omitempty"`
	Page       *int       `json:"page,omitempty" url:"page,omitempty"`
	Start      *string    `json:"start,omitempty" url:"start,omitempty"`
	Size       *int       `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetLogs) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetLogs) UnmarshalJSON(data []byte) error {
	type embed GetLogs
	var unmarshaler = struct {
		embed
		StartDate *core.DateTime `json:"start_date,omitempty"`
		EndDate   *core.DateTime `json:"end_date,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetLogs(unmarshaler.embed)
	g.StartDate = unmarshaler.StartDate.TimePtr()
	g.EndDate = unmarshaler.EndDate.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetLogs) MarshalJSON() ([]byte, error) {
	type embed GetLogs
	var marshaler = struct {
		embed
		StartDate *core.DateTime `json:"start_date,omitempty"`
		EndDate   *core.DateTime `json:"end_date,omitempty"`
	}{
		embed:     embed(*g),
		StartDate: core.NewOptionalDateTime(g.StartDate),
		EndDate:   core.NewOptionalDateTime(g.EndDate),
	}
	return json.Marshal(marshaler)
}

func (g *GetLogs) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetPermissions struct {
	ApplicationType *string `json:"application_type,omitempty" url:"application_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPermissions) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPermissions) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPermissions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPermissions(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPermissions) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetProxies struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Name  *string  `json:"name,omitempty" url:"name,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetProxies) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetProxies) UnmarshalJSON(data []byte) error {
	type unmarshaler GetProxies
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetProxies(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetProxies) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetReactorFormulas struct {
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	Page  *int    `json:"page,omitempty" url:"page,omitempty"`
	Start *string `json:"start,omitempty" url:"start,omitempty"`
	Size  *int    `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetReactorFormulas) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetReactorFormulas) UnmarshalJSON(data []byte) error {
	type unmarshaler GetReactorFormulas
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetReactorFormulas(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetReactorFormulas) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetReactors struct {
	ID    []string `json:"id,omitempty" url:"id,omitempty"`
	Name  *string  `json:"name,omitempty" url:"name,omitempty"`
	Page  *int     `json:"page,omitempty" url:"page,omitempty"`
	Start *string  `json:"start,omitempty" url:"start,omitempty"`
	Size  *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetReactors) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetReactors) UnmarshalJSON(data []byte) error {
	type unmarshaler GetReactors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetReactors(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetReactors) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTenantInvitations struct {
	Status *TenantInvitationStatus `json:"status,omitempty" url:"status,omitempty"`
	Page   *int                    `json:"page,omitempty" url:"page,omitempty"`
	Start  *string                 `json:"start,omitempty" url:"start,omitempty"`
	Size   *int                    `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTenantInvitations) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTenantInvitations) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTenantInvitations
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTenantInvitations(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTenantInvitations) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTenantMembers struct {
	UserID []string `json:"user_id,omitempty" url:"user_id,omitempty"`
	Page   *int     `json:"page,omitempty" url:"page,omitempty"`
	Start  *string  `json:"start,omitempty" url:"start,omitempty"`
	Size   *int     `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTenantMembers) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTenantMembers) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTenantMembers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTenantMembers(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTenantMembers) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTokens struct {
	ID       []string           `json:"id,omitempty" url:"id,omitempty"`
	Metadata map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	Page     *int               `json:"page,omitempty" url:"page,omitempty"`
	Start    *string            `json:"start,omitempty" url:"start,omitempty"`
	Size     *int               `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTokens) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTokens) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokens
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTokens(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTokens) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTokensV2 struct {
	Type        *string            `json:"type,omitempty" url:"type,omitempty"`
	Container   *string            `json:"container,omitempty" url:"container,omitempty"`
	Fingerprint *string            `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	Metadata    map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	Start       *string            `json:"start,omitempty" url:"start,omitempty"`
	Size        *int               `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTokensV2) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTokensV2) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokensV2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTokensV2(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTokensV2) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Pagination struct {
	TotalItems *int    `json:"total_items,omitempty" url:"total_items,omitempty"`
	PageNumber *int    `json:"page_number,omitempty" url:"page_number,omitempty"`
	PageSize   *int    `json:"page_size,omitempty" url:"page_size,omitempty"`
	TotalPages *int    `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	After      *string `json:"after,omitempty" url:"after,omitempty"`
	Next       *string `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Pagination) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagination(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagination) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProblemDetails struct {
	Type     *string `json:"type,omitempty" url:"type,omitempty"`
	Title    *string `json:"title,omitempty" url:"title,omitempty"`
	Status   *int    `json:"status,omitempty" url:"status,omitempty"`
	Detail   *string `json:"detail,omitempty" url:"detail,omitempty"`
	Instance *string `json:"instance,omitempty" url:"instance,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	_rawJSON json.RawMessage
}

func (p *ProblemDetails) GetExtraProperties() map[string]interface{} {
	return p.ExtraProperties
}

func (p *ProblemDetails) UnmarshalJSON(data []byte) error {
	type embed ProblemDetails
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProblemDetails(unmarshaler.embed)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.ExtraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProblemDetails) MarshalJSON() ([]byte, error) {
	type embed ProblemDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	return core.MarshalJSONWithExtraProperties(marshaler, p.ExtraProperties)
}

func (p *ProblemDetails) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A public signing key in PEM format. The key is represented as a string
// and includes the BEGIN and END markers along with the base64-encoded
// key data.
type PublicKey = string

type ReactorFormulaPaginatedList struct {
	Pagination *Pagination       `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*ReactorFormula `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReactorFormulaPaginatedList) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReactorFormulaPaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler ReactorFormulaPaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReactorFormulaPaginatedList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReactorFormulaPaginatedList) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type StringStringKeyValuePair struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringStringKeyValuePair) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringStringKeyValuePair) UnmarshalJSON(data []byte) error {
	type unmarshaler StringStringKeyValuePair
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringStringKeyValuePair(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringStringKeyValuePair) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Tenant struct {
	ID         *string            `json:"id,omitempty" url:"id,omitempty"`
	OwnerID    *string            `json:"owner_id,omitempty" url:"owner_id,omitempty"`
	Name       *string            `json:"name,omitempty" url:"name,omitempty"`
	Type       *string            `json:"type,omitempty" url:"type,omitempty"`
	CreatedBy  *string            `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt  *time.Time         `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy *string            `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt *time.Time         `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Settings   map[string]*string `json:"settings,omitempty" url:"settings,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *Tenant) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Tenant) UnmarshalJSON(data []byte) error {
	type embed Tenant
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Tenant(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tenant) MarshalJSON() ([]byte, error) {
	type embed Tenant
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  core.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: core.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *Tenant) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantConnectionOptions struct {
	DomainAliases []string `json:"domain_aliases,omitempty" url:"domain_aliases,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantConnectionOptions) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantConnectionOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantConnectionOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantConnectionOptions(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantConnectionOptions) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationResponse struct {
	ID         *string                 `json:"id,omitempty" url:"id,omitempty"`
	TenantID   *string                 `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Email      *string                 `json:"email,omitempty" url:"email,omitempty"`
	Role       *string                 `json:"role,omitempty" url:"role,omitempty"`
	Status     *TenantInvitationStatus `json:"status,omitempty" url:"status,omitempty"`
	ExpiresAt  *time.Time              `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	CreatedBy  *string                 `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt  *time.Time              `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy *string                 `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt *time.Time              `json:"modified_at,omitempty" url:"modified_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantInvitationResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantInvitationResponse) UnmarshalJSON(data []byte) error {
	type embed TenantInvitationResponse
	var unmarshaler = struct {
		embed
		ExpiresAt  *core.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TenantInvitationResponse(unmarshaler.embed)
	t.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantInvitationResponse) MarshalJSON() ([]byte, error) {
	type embed TenantInvitationResponse
	var marshaler = struct {
		embed
		ExpiresAt  *core.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *core.DateTime `json:"created_at,omitempty"`
		ModifiedAt *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*t),
		ExpiresAt:  core.NewOptionalDateTime(t.ExpiresAt),
		CreatedAt:  core.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: core.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TenantInvitationResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationResponsePaginatedList struct {
	Pagination *Pagination                 `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*TenantInvitationResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantInvitationResponsePaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantInvitationResponsePaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantInvitationResponsePaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantInvitationResponsePaginatedList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantInvitationResponsePaginatedList) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantInvitationStatus string

const (
	TenantInvitationStatusPending TenantInvitationStatus = "PENDING"
	TenantInvitationStatusExpired TenantInvitationStatus = "EXPIRED"
)

func NewTenantInvitationStatusFromString(s string) (TenantInvitationStatus, error) {
	switch s {
	case "PENDING":
		return TenantInvitationStatusPending, nil
	case "EXPIRED":
		return TenantInvitationStatusExpired, nil
	}
	var t TenantInvitationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TenantInvitationStatus) Ptr() *TenantInvitationStatus {
	return &t
}

type TenantMemberResponse struct {
	ID          *string    `json:"id,omitempty" url:"id,omitempty"`
	TenantID    *string    `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	User        *User      `json:"user,omitempty" url:"user,omitempty"`
	Role        *string    `json:"role,omitempty" url:"role,omitempty"`
	CreatedBy   *string    `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedDate *time.Time `json:"created_date,omitempty" url:"created_date,omitempty"`
	ModifiedBy  *string    `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt  *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantMemberResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantMemberResponse) UnmarshalJSON(data []byte) error {
	type embed TenantMemberResponse
	var unmarshaler = struct {
		embed
		CreatedDate *core.DateTime `json:"created_date,omitempty"`
		ModifiedAt  *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TenantMemberResponse(unmarshaler.embed)
	t.CreatedDate = unmarshaler.CreatedDate.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantMemberResponse) MarshalJSON() ([]byte, error) {
	type embed TenantMemberResponse
	var marshaler = struct {
		embed
		CreatedDate *core.DateTime `json:"created_date,omitempty"`
		ModifiedAt  *core.DateTime `json:"modified_at,omitempty"`
	}{
		embed:       embed(*t),
		CreatedDate: core.NewOptionalDateTime(t.CreatedDate),
		ModifiedAt:  core.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TenantMemberResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantMemberResponsePaginatedList struct {
	Pagination *Pagination             `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*TenantMemberResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantMemberResponsePaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantMemberResponsePaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantMemberResponsePaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantMemberResponsePaginatedList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantMemberResponsePaginatedList) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TenantUsageReport struct {
	TokenReport *TokenReport `json:"token_report,omitempty" url:"token_report,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TenantUsageReport) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantUsageReport) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantUsageReport
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantUsageReport(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantUsageReport) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAcsRenderingType struct {
	AcsInterface  *string `json:"acsInterface,omitempty" url:"acsInterface,omitempty"`
	AcsUITemplate *string `json:"acsUiTemplate,omitempty" url:"acsUiTemplate,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsAcsRenderingType) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAcsRenderingType) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAcsRenderingType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAcsRenderingType(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAcsRenderingType) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAddress struct {
	Line1       *string `json:"line1,omitempty" url:"line1,omitempty"`
	Line2       *string `json:"line2,omitempty" url:"line2,omitempty"`
	Line3       *string `json:"line3,omitempty" url:"line3,omitempty"`
	PostalCode  *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	City        *string `json:"city,omitempty" url:"city,omitempty"`
	StateCode   *string `json:"state_code,omitempty" url:"state_code,omitempty"`
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsAddress) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAddress(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAddress) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsAuthentication struct {
	PanTokenID                  *string                    `json:"pan_token_id,omitempty" url:"pan_token_id,omitempty"`
	TokenID                     *string                    `json:"token_id,omitempty" url:"token_id,omitempty"`
	TokenIntentID               *string                    `json:"token_intent_id,omitempty" url:"token_intent_id,omitempty"`
	ThreedsVersion              *string                    `json:"threeds_version,omitempty" url:"threeds_version,omitempty"`
	AcsTransactionID            *string                    `json:"acs_transaction_id,omitempty" url:"acs_transaction_id,omitempty"`
	DsTransactionID             *string                    `json:"ds_transaction_id,omitempty" url:"ds_transaction_id,omitempty"`
	SdkTransactionID            *string                    `json:"sdk_transaction_id,omitempty" url:"sdk_transaction_id,omitempty"`
	AcsReferenceNumber          *string                    `json:"acs_reference_number,omitempty" url:"acs_reference_number,omitempty"`
	DsReferenceNumber           *string                    `json:"ds_reference_number,omitempty" url:"ds_reference_number,omitempty"`
	AuthenticationValue         *string                    `json:"authentication_value,omitempty" url:"authentication_value,omitempty"`
	AuthenticationStatus        *string                    `json:"authentication_status,omitempty" url:"authentication_status,omitempty"`
	AuthenticationStatusCode    *string                    `json:"authentication_status_code,omitempty" url:"authentication_status_code,omitempty"`
	AuthenticationStatusReason  *string                    `json:"authentication_status_reason,omitempty" url:"authentication_status_reason,omitempty"`
	Eci                         *string                    `json:"eci,omitempty" url:"eci,omitempty"`
	AcsChallengeMandated        *string                    `json:"acs_challenge_mandated,omitempty" url:"acs_challenge_mandated,omitempty"`
	AcsDecoupledAuthentication  *string                    `json:"acs_decoupled_authentication,omitempty" url:"acs_decoupled_authentication,omitempty"`
	AuthenticationChallengeType *string                    `json:"authentication_challenge_type,omitempty" url:"authentication_challenge_type,omitempty"`
	AcsRenderingType            *ThreeDsAcsRenderingType   `json:"acs_rendering_type,omitempty" url:"acs_rendering_type,omitempty"`
	AcsSignedContent            *string                    `json:"acs_signed_content,omitempty" url:"acs_signed_content,omitempty"`
	AcsChallengeURL             *string                    `json:"acs_challenge_url,omitempty" url:"acs_challenge_url,omitempty"`
	ChallengePreference         *string                    `json:"challenge_preference,omitempty" url:"challenge_preference,omitempty"`
	ChallengePreferenceCode     *string                    `json:"challenge_preference_code,omitempty" url:"challenge_preference_code,omitempty"`
	ChallengeAttempts           *string                    `json:"challenge_attempts,omitempty" url:"challenge_attempts,omitempty"`
	ChallengeCancelReason       *string                    `json:"challenge_cancel_reason,omitempty" url:"challenge_cancel_reason,omitempty"`
	ChallengeCancelReasonCode   *string                    `json:"challenge_cancel_reason_code,omitempty" url:"challenge_cancel_reason_code,omitempty"`
	CardholderInfo              *string                    `json:"cardholder_info,omitempty" url:"cardholder_info,omitempty"`
	WhitelistStatus             *string                    `json:"whitelist_status,omitempty" url:"whitelist_status,omitempty"`
	WhitelistStatusSource       *string                    `json:"whitelist_status_source,omitempty" url:"whitelist_status_source,omitempty"`
	MessageExtensions           []*ThreeDsMessageExtension `json:"message_extensions,omitempty" url:"message_extensions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsAuthentication) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsAuthentication) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsAuthentication
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsAuthentication(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsAuthentication) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderAccountInfo struct {
	AccountAge                 *string `json:"account_age,omitempty" url:"account_age,omitempty"`
	AccountLastChanged         *string `json:"account_last_changed,omitempty" url:"account_last_changed,omitempty"`
	AccountChangeDate          *string `json:"account_change_date,omitempty" url:"account_change_date,omitempty"`
	AccountCreatedDate         *string `json:"account_created_date,omitempty" url:"account_created_date,omitempty"`
	AccountPwdLastChanged      *string `json:"account_pwd_last_changed,omitempty" url:"account_pwd_last_changed,omitempty"`
	AccountPwdChangeDate       *string `json:"account_pwd_change_date,omitempty" url:"account_pwd_change_date,omitempty"`
	PurchaseCountHalfYear      *string `json:"purchase_count_half_year,omitempty" url:"purchase_count_half_year,omitempty"`
	TransactionCountDay        *string `json:"transaction_count_day,omitempty" url:"transaction_count_day,omitempty"`
	PaymentAccountAge          *string `json:"payment_account_age,omitempty" url:"payment_account_age,omitempty"`
	TransactionCountYear       *string `json:"transaction_count_year,omitempty" url:"transaction_count_year,omitempty"`
	PaymentAccountCreated      *string `json:"payment_account_created,omitempty" url:"payment_account_created,omitempty"`
	ShippingAddressFirstUsed   *string `json:"shipping_address_first_used,omitempty" url:"shipping_address_first_used,omitempty"`
	ShippingAddressUsageDate   *string `json:"shipping_address_usage_date,omitempty" url:"shipping_address_usage_date,omitempty"`
	ShippingAccountNameMatch   *bool   `json:"shipping_account_name_match,omitempty" url:"shipping_account_name_match,omitempty"`
	SuspiciousActivityObserved *bool   `json:"suspicious_activity_observed,omitempty" url:"suspicious_activity_observed,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsCardholderAccountInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderAccountInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderAccountInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderAccountInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderAccountInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderAuthenticationInfo struct {
	Method    *string `json:"method,omitempty" url:"method,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	Data      *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsCardholderAuthenticationInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderAuthenticationInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderAuthenticationInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderAuthenticationInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderAuthenticationInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderInfo struct {
	AccountID                   *string                              `json:"account_id,omitempty" url:"account_id,omitempty"`
	AccountType                 *string                              `json:"account_type,omitempty" url:"account_type,omitempty"`
	AccountInfo                 *ThreeDsCardholderAccountInfo        `json:"account_info,omitempty" url:"account_info,omitempty"`
	AuthenticationInfo          *ThreeDsCardholderAuthenticationInfo `json:"authentication_info,omitempty" url:"authentication_info,omitempty"`
	PriorAuthenticationInfo     *ThreeDsPriorAuthenticationInfo      `json:"prior_authentication_info,omitempty" url:"prior_authentication_info,omitempty"`
	Name                        *string                              `json:"name,omitempty" url:"name,omitempty"`
	Email                       *string                              `json:"email,omitempty" url:"email,omitempty"`
	PhoneNumber                 *ThreeDsCardholderPhoneNumber        `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	MobilePhoneNumber           *ThreeDsCardholderPhoneNumber        `json:"mobile_phone_number,omitempty" url:"mobile_phone_number,omitempty"`
	WorkPhoneNumber             *ThreeDsCardholderPhoneNumber        `json:"work_phone_number,omitempty" url:"work_phone_number,omitempty"`
	BillingShippingAddressMatch *string                              `json:"billing_shipping_address_match,omitempty" url:"billing_shipping_address_match,omitempty"`
	BillingAddress              *ThreeDsAddress                      `json:"billing_address,omitempty" url:"billing_address,omitempty"`
	ShippingAddress             *ThreeDsAddress                      `json:"shipping_address,omitempty" url:"shipping_address,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsCardholderInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsCardholderPhoneNumber struct {
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`
	Number      *string `json:"number,omitempty" url:"number,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsCardholderPhoneNumber) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsCardholderPhoneNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsCardholderPhoneNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsCardholderPhoneNumber(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsCardholderPhoneNumber) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsDeviceInfo struct {
	BrowserAcceptHeader      *string                        `json:"browser_accept_header,omitempty" url:"browser_accept_header,omitempty"`
	BrowserIP                *string                        `json:"browser_ip,omitempty" url:"browser_ip,omitempty"`
	BrowserJavascriptEnabled *bool                          `json:"browser_javascript_enabled,omitempty" url:"browser_javascript_enabled,omitempty"`
	BrowserJavaEnabled       *bool                          `json:"browser_java_enabled,omitempty" url:"browser_java_enabled,omitempty"`
	BrowserLanguage          *string                        `json:"browser_language,omitempty" url:"browser_language,omitempty"`
	BrowserColorDepth        *string                        `json:"browser_color_depth,omitempty" url:"browser_color_depth,omitempty"`
	BrowserScreenHeight      *string                        `json:"browser_screen_height,omitempty" url:"browser_screen_height,omitempty"`
	BrowserScreenWidth       *string                        `json:"browser_screen_width,omitempty" url:"browser_screen_width,omitempty"`
	BrowserTz                *string                        `json:"browser_tz,omitempty" url:"browser_tz,omitempty"`
	BrowserUserAgent         *string                        `json:"browser_user_agent,omitempty" url:"browser_user_agent,omitempty"`
	SdkTransactionID         *string                        `json:"sdk_transaction_id,omitempty" url:"sdk_transaction_id,omitempty"`
	SdkApplicationID         *string                        `json:"sdk_application_id,omitempty" url:"sdk_application_id,omitempty"`
	SdkEncryptionData        *string                        `json:"sdk_encryption_data,omitempty" url:"sdk_encryption_data,omitempty"`
	SdkEphemeralPublicKey    *string                        `json:"sdk_ephemeral_public_key,omitempty" url:"sdk_ephemeral_public_key,omitempty"`
	SdkMaxTimeout            *string                        `json:"sdk_max_timeout,omitempty" url:"sdk_max_timeout,omitempty"`
	SdkReferenceNumber       *string                        `json:"sdk_reference_number,omitempty" url:"sdk_reference_number,omitempty"`
	SdkRenderOptions         *ThreeDsMobileSdkRenderOptions `json:"sdk_render_options,omitempty" url:"sdk_render_options,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsDeviceInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsDeviceInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsDeviceInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsDeviceInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsDeviceInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMerchantInfo struct {
	Mid          *string                  `json:"mid,omitempty" url:"mid,omitempty"`
	AcquirerBin  *string                  `json:"acquirer_bin,omitempty" url:"acquirer_bin,omitempty"`
	Name         *string                  `json:"name,omitempty" url:"name,omitempty"`
	CountryCode  *string                  `json:"country_code,omitempty" url:"country_code,omitempty"`
	CategoryCode *string                  `json:"category_code,omitempty" url:"category_code,omitempty"`
	RiskInfo     *ThreeDsMerchantRiskInfo `json:"risk_info,omitempty" url:"risk_info,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsMerchantInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMerchantInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMerchantInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMerchantInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMerchantInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMerchantRiskInfo struct {
	DeliveryEmail     *string `json:"delivery_email,omitempty" url:"delivery_email,omitempty"`
	DeliveryTimeFrame *string `json:"delivery_time_frame,omitempty" url:"delivery_time_frame,omitempty"`
	GiftCardAmount    *string `json:"gift_card_amount,omitempty" url:"gift_card_amount,omitempty"`
	GiftCardCount     *string `json:"gift_card_count,omitempty" url:"gift_card_count,omitempty"`
	GiftCardCurrency  *string `json:"gift_card_currency,omitempty" url:"gift_card_currency,omitempty"`
	PreOrderPurchase  *bool   `json:"pre_order_purchase,omitempty" url:"pre_order_purchase,omitempty"`
	PreOrderDate      *string `json:"pre_order_date,omitempty" url:"pre_order_date,omitempty"`
	ReorderedPurchase *bool   `json:"reordered_purchase,omitempty" url:"reordered_purchase,omitempty"`
	ShippingMethod    *string `json:"shipping_method,omitempty" url:"shipping_method,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsMerchantRiskInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMerchantRiskInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMerchantRiskInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMerchantRiskInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMerchantRiskInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMessageExtension struct {
	ID       *string     `json:"id,omitempty" url:"id,omitempty"`
	Name     *string     `json:"name,omitempty" url:"name,omitempty"`
	Critical *bool       `json:"critical,omitempty" url:"critical,omitempty"`
	Data     interface{} `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsMessageExtension) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMessageExtension) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMessageExtension
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMessageExtension(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMessageExtension) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMethod struct {
	MethodURL                 *string `json:"method_url,omitempty" url:"method_url,omitempty"`
	MethodCompletionIndicator *string `json:"method_completion_indicator,omitempty" url:"method_completion_indicator,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsMethod) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMethod(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMethod) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsMobileSdkRenderOptions struct {
	SdkInterface *string  `json:"sdk_interface,omitempty" url:"sdk_interface,omitempty"`
	SdkUIType    []string `json:"sdk_ui_type,omitempty" url:"sdk_ui_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsMobileSdkRenderOptions) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsMobileSdkRenderOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsMobileSdkRenderOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsMobileSdkRenderOptions(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsMobileSdkRenderOptions) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsPriorAuthenticationInfo struct {
	Method      *string `json:"method,omitempty" url:"method,omitempty"`
	Timestamp   *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	ReferenceID *string `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	Data        *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsPriorAuthenticationInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsPriorAuthenticationInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsPriorAuthenticationInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsPriorAuthenticationInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsPriorAuthenticationInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsPurchaseInfo struct {
	Amount              *string `json:"amount,omitempty" url:"amount,omitempty"`
	Currency            *string `json:"currency,omitempty" url:"currency,omitempty"`
	Exponent            *string `json:"exponent,omitempty" url:"exponent,omitempty"`
	Date                *string `json:"date,omitempty" url:"date,omitempty"`
	TransactionType     *string `json:"transaction_type,omitempty" url:"transaction_type,omitempty"`
	InstallmentCount    *string `json:"installment_count,omitempty" url:"installment_count,omitempty"`
	RecurringExpiration *string `json:"recurring_expiration,omitempty" url:"recurring_expiration,omitempty"`
	RecurringFrequency  *string `json:"recurring_frequency,omitempty" url:"recurring_frequency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsPurchaseInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsPurchaseInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsPurchaseInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsPurchaseInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsPurchaseInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsRequestorInfo struct {
	ID   *string `json:"id,omitempty" url:"id,omitempty"`
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	URL  *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsRequestorInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsRequestorInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsRequestorInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsRequestorInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsRequestorInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsSession struct {
	ID               *string                `json:"id,omitempty" url:"id,omitempty"`
	Type             *string                `json:"type,omitempty" url:"type,omitempty"`
	TenantID         *string                `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	PanTokenID       *string                `json:"pan_token_id,omitempty" url:"pan_token_id,omitempty"`
	TokenID          *string                `json:"token_id,omitempty" url:"token_id,omitempty"`
	TokenIntentID    *string                `json:"token_intent_id,omitempty" url:"token_intent_id,omitempty"`
	CardBrand        *string                `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	ExpirationDate   *time.Time             `json:"expiration_date,omitempty" url:"expiration_date,omitempty"`
	CreatedDate      *time.Time             `json:"created_date,omitempty" url:"created_date,omitempty"`
	CreatedBy        *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	ModifiedDate     *time.Time             `json:"modified_date,omitempty" url:"modified_date,omitempty"`
	ModifiedBy       *string                `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	Device           *string                `json:"device,omitempty" url:"device,omitempty"`
	DeviceInfo       *ThreeDsDeviceInfo     `json:"device_info,omitempty" url:"device_info,omitempty"`
	WebChallengeMode *string                `json:"web_challenge_mode,omitempty" url:"web_challenge_mode,omitempty"`
	Version          *ThreeDsVersion        `json:"version,omitempty" url:"version,omitempty"`
	Method           *ThreeDsMethod         `json:"method,omitempty" url:"method,omitempty"`
	Authentication   *ThreeDsAuthentication `json:"authentication,omitempty" url:"authentication,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsSession) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsSession) UnmarshalJSON(data []byte) error {
	type embed ThreeDsSession
	var unmarshaler = struct {
		embed
		ExpirationDate *core.DateTime `json:"expiration_date,omitempty"`
		CreatedDate    *core.DateTime `json:"created_date,omitempty"`
		ModifiedDate   *core.DateTime `json:"modified_date,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = ThreeDsSession(unmarshaler.embed)
	t.ExpirationDate = unmarshaler.ExpirationDate.TimePtr()
	t.CreatedDate = unmarshaler.CreatedDate.TimePtr()
	t.ModifiedDate = unmarshaler.ModifiedDate.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsSession) MarshalJSON() ([]byte, error) {
	type embed ThreeDsSession
	var marshaler = struct {
		embed
		ExpirationDate *core.DateTime `json:"expiration_date,omitempty"`
		CreatedDate    *core.DateTime `json:"created_date,omitempty"`
		ModifiedDate   *core.DateTime `json:"modified_date,omitempty"`
	}{
		embed:          embed(*t),
		ExpirationDate: core.NewOptionalDateTime(t.ExpirationDate),
		CreatedDate:    core.NewOptionalDateTime(t.CreatedDate),
		ModifiedDate:   core.NewOptionalDateTime(t.ModifiedDate),
	}
	return json.Marshal(marshaler)
}

func (t *ThreeDsSession) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreeDsVersion struct {
	RecommendedVersion          *string  `json:"recommended_version,omitempty" url:"recommended_version,omitempty"`
	AvailableVersions           []string `json:"available_versions,omitempty" url:"available_versions,omitempty"`
	EarliestAcsSupportedVersion *string  `json:"earliest_acs_supported_version,omitempty" url:"earliest_acs_supported_version,omitempty"`
	EarliestDsSupportedVersion  *string  `json:"earliest_ds_supported_version,omitempty" url:"earliest_ds_supported_version,omitempty"`
	LatestAcsSupportedVersion   *string  `json:"latest_acs_supported_version,omitempty" url:"latest_acs_supported_version,omitempty"`
	LatestDsSupportedVersion    *string  `json:"latest_ds_supported_version,omitempty" url:"latest_ds_supported_version,omitempty"`
	AcsInformation              []string `json:"acs_information,omitempty" url:"acs_information,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThreeDsVersion) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreeDsVersion) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreeDsVersion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreeDsVersion(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreeDsVersion) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenAuthentication struct {
	ThreedsCryptogram *string `json:"threeds_cryptogram,omitempty" url:"threeds_cryptogram,omitempty"`
	EciIndicator      *string `json:"eci_indicator,omitempty" url:"eci_indicator,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenAuthentication) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenAuthentication) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenAuthentication
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenAuthentication(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenAuthentication) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenIntentExtras struct {
	TspDetails *TokenServiceProviderDetails `json:"tsp_details,omitempty" url:"tsp_details,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenIntentExtras) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenIntentExtras) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenIntentExtras
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenIntentExtras(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenIntentExtras) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenMetrics struct {
	Count         *int64     `json:"count,omitempty" url:"count,omitempty"`
	LastCreatedAt *time.Time `json:"last_created_at,omitempty" url:"last_created_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenMetrics) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenMetrics) UnmarshalJSON(data []byte) error {
	type embed TokenMetrics
	var unmarshaler = struct {
		embed
		LastCreatedAt *core.DateTime `json:"last_created_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenMetrics(unmarshaler.embed)
	t.LastCreatedAt = unmarshaler.LastCreatedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenMetrics) MarshalJSON() ([]byte, error) {
	type embed TokenMetrics
	var marshaler = struct {
		embed
		LastCreatedAt *core.DateTime `json:"last_created_at,omitempty"`
	}{
		embed:         embed(*t),
		LastCreatedAt: core.NewOptionalDateTime(t.LastCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TokenMetrics) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenReport struct {
	IncludedMonthlyActiveTokens *int64                   `json:"included_monthly_active_tokens,omitempty" url:"included_monthly_active_tokens,omitempty"`
	MonthlyActiveTokens         *int64                   `json:"monthly_active_tokens,omitempty" url:"monthly_active_tokens,omitempty"`
	MetricsByType               map[string]*TokenMetrics `json:"metrics_by_type,omitempty" url:"metrics_by_type,omitempty"`
	TotalTokens                 *int64                   `json:"total_tokens,omitempty" url:"total_tokens,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenReport) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenReport) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenReport
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenReport(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenReport) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenServiceProviderDetails struct {
	Tsp              *string           `json:"tsp,omitempty" url:"tsp,omitempty"`
	AuthMethod       *string           `json:"auth_method,omitempty" url:"auth_method,omitempty"`
	MessageID        *string           `json:"message_id,omitempty" url:"message_id,omitempty"`
	EciIndicator     *string           `json:"eci_indicator,omitempty" url:"eci_indicator,omitempty"`
	AssuranceDetails *AssuranceDetails `json:"assurance_details,omitempty" url:"assurance_details,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenServiceProviderDetails) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenServiceProviderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenServiceProviderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenServiceProviderDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenServiceProviderDetails) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateReactorFormulaRequest struct {
	Type              string                            `json:"type" url:"type"`
	Name              string                            `json:"name" url:"name"`
	Description       *string                           `json:"description,omitempty" url:"description,omitempty"`
	Icon              *string                           `json:"icon,omitempty" url:"icon,omitempty"`
	Code              *string                           `json:"code,omitempty" url:"code,omitempty"`
	Configuration     []*ReactorFormulaConfiguration    `json:"configuration,omitempty" url:"configuration,omitempty"`
	RequestParameters []*ReactorFormulaRequestParameter `json:"request_parameters,omitempty" url:"request_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateReactorFormulaRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateReactorFormulaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateReactorFormulaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateReactorFormulaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateReactorFormulaRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type User struct {
	ID          *string `json:"id,omitempty" url:"id,omitempty"`
	Email       *string `json:"email,omitempty" url:"email,omitempty"`
	Provider    *string `json:"provider,omitempty" url:"provider,omitempty"`
	MfaEnrolled *bool   `json:"mfa_enrolled,omitempty" url:"mfa_enrolled,omitempty"`
	FirstName   *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName    *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	Picture     *string `json:"picture,omitempty" url:"picture,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationProblemDetails struct {
	Errors   map[string][]string `json:"errors,omitempty" url:"errors,omitempty"`
	Type     *string             `json:"type,omitempty" url:"type,omitempty"`
	Title    *string             `json:"title,omitempty" url:"title,omitempty"`
	Status   *int                `json:"status,omitempty" url:"status,omitempty"`
	Detail   *string             `json:"detail,omitempty" url:"detail,omitempty"`
	Instance *string             `json:"instance,omitempty" url:"instance,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	_rawJSON json.RawMessage
}

func (v *ValidationProblemDetails) GetExtraProperties() map[string]interface{} {
	return v.ExtraProperties
}

func (v *ValidationProblemDetails) UnmarshalJSON(data []byte) error {
	type embed ValidationProblemDetails
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValidationProblemDetails(unmarshaler.embed)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.ExtraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemDetails) MarshalJSON() ([]byte, error) {
	type embed ValidationProblemDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	return core.MarshalJSONWithExtraProperties(marshaler, v.ExtraProperties)
}

func (v *ValidationProblemDetails) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
