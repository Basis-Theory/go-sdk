// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/internal"
	time "time"
)

type CreateTokenIntentRequest struct {
	Type string      `json:"type" url:"-"`
	Data interface{} `json:"data,omitempty" url:"-"`
}

type TokenIntent struct {
	ID             *string              `json:"id,omitempty" url:"id,omitempty"`
	Type           *string              `json:"type,omitempty" url:"type,omitempty"`
	TenantID       *string              `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Fingerprint    *string              `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	CreatedBy      *string              `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt      *time.Time           `json:"created_at,omitempty" url:"created_at,omitempty"`
	ExpiresAt      *time.Time           `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Card           *CardDetails         `json:"card,omitempty" url:"card,omitempty"`
	Bank           *BankDetails         `json:"bank,omitempty" url:"bank,omitempty"`
	NetworkToken   *CardDetails         `json:"network_token,omitempty" url:"network_token,omitempty"`
	Authentication *TokenAuthentication `json:"authentication,omitempty" url:"authentication,omitempty"`
	Extras         *TokenIntentExtras   `json:"_extras,omitempty" url:"_extras,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenIntent) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TokenIntent) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TokenIntent) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *TokenIntent) GetFingerprint() *string {
	if t == nil {
		return nil
	}
	return t.Fingerprint
}

func (t *TokenIntent) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TokenIntent) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TokenIntent) GetExpiresAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ExpiresAt
}

func (t *TokenIntent) GetCard() *CardDetails {
	if t == nil {
		return nil
	}
	return t.Card
}

func (t *TokenIntent) GetBank() *BankDetails {
	if t == nil {
		return nil
	}
	return t.Bank
}

func (t *TokenIntent) GetNetworkToken() *CardDetails {
	if t == nil {
		return nil
	}
	return t.NetworkToken
}

func (t *TokenIntent) GetAuthentication() *TokenAuthentication {
	if t == nil {
		return nil
	}
	return t.Authentication
}

func (t *TokenIntent) GetExtras() *TokenIntentExtras {
	if t == nil {
		return nil
	}
	return t.Extras
}

func (t *TokenIntent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenIntent) UnmarshalJSON(data []byte) error {
	type embed TokenIntent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenIntent(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenIntent) MarshalJSON() ([]byte, error) {
	type embed TokenIntent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewOptionalDateTime(t.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(t.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (t *TokenIntent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
