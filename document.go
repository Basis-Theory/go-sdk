// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
	time "time"
)

type CreateDocumentRequest struct {
	Metadata map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateDocumentRequest) GetMetadata() map[string]*string {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *CreateDocumentRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDocumentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDocumentRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Document struct {
	ID          *string            `json:"id,omitempty" url:"id,omitempty"`
	TenantID    *string            `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Metadata    map[string]*string `json:"metadata,omitempty" url:"metadata,omitempty"`
	ContentType *string            `json:"content_type,omitempty" url:"content_type,omitempty"`
	CreatedBy   *string            `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt   *time.Time         `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Document) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *Document) GetTenantID() *string {
	if d == nil {
		return nil
	}
	return d.TenantID
}

func (d *Document) GetMetadata() map[string]*string {
	if d == nil {
		return nil
	}
	return d.Metadata
}

func (d *Document) GetContentType() *string {
	if d == nil {
		return nil
	}
	return d.ContentType
}

func (d *Document) GetCreatedBy() *string {
	if d == nil {
		return nil
	}
	return d.CreatedBy
}

func (d *Document) GetCreatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *Document) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Document) UnmarshalJSON(data []byte) error {
	type embed Document
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Document(unmarshaler.embed)
	d.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Document) MarshalJSON() ([]byte, error) {
	type embed Document
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*d),
		CreatedAt: internal.NewOptionalDateTime(d.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *Document) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentUploadRequest struct {
	Request *CreateDocumentRequest `json:"-" url:"request,omitempty"`
}
