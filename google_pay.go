// Code generated by Fern. DO NOT EDIT.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
	time "time"
)

type GooglePayCreateRequest struct {
	ExpiresAt         *string               `json:"expires_at,omitempty" url:"-"`
	GooglePaymentData *GooglePayMethodToken `json:"google_payment_data,omitempty" url:"-"`
}

type GooglePayCreateResponse struct {
	GooglePay   *GooglePayCreateTokenResponse `json:"google_pay,omitempty" url:"google_pay,omitempty"`
	TokenIntent *CreateTokenIntentResponse    `json:"token_intent,omitempty" url:"token_intent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayCreateResponse) GetGooglePay() *GooglePayCreateTokenResponse {
	if g == nil {
		return nil
	}
	return g.GooglePay
}

func (g *GooglePayCreateResponse) GetTokenIntent() *CreateTokenIntentResponse {
	if g == nil {
		return nil
	}
	return g.TokenIntent
}

func (g *GooglePayCreateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayCreateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayCreateResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GooglePayCreateTokenResponse struct {
	ID        *string                      `json:"id,omitempty" url:"id,omitempty"`
	TenantID  *string                      `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Status    *string                      `json:"status,omitempty" url:"status,omitempty"`
	ExpiresAt *time.Time                   `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	CreatedBy *string                      `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt *time.Time                   `json:"created_at,omitempty" url:"created_at,omitempty"`
	Card      *CardDetails                 `json:"card,omitempty" url:"card,omitempty"`
	Details   *TokenServiceProviderDetails `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayCreateTokenResponse) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GooglePayCreateTokenResponse) GetTenantID() *string {
	if g == nil {
		return nil
	}
	return g.TenantID
}

func (g *GooglePayCreateTokenResponse) GetStatus() *string {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GooglePayCreateTokenResponse) GetExpiresAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GooglePayCreateTokenResponse) GetCreatedBy() *string {
	if g == nil {
		return nil
	}
	return g.CreatedBy
}

func (g *GooglePayCreateTokenResponse) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GooglePayCreateTokenResponse) GetCard() *CardDetails {
	if g == nil {
		return nil
	}
	return g.Card
}

func (g *GooglePayCreateTokenResponse) GetDetails() *TokenServiceProviderDetails {
	if g == nil {
		return nil
	}
	return g.Details
}

func (g *GooglePayCreateTokenResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayCreateTokenResponse) UnmarshalJSON(data []byte) error {
	type embed GooglePayCreateTokenResponse
	var unmarshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GooglePayCreateTokenResponse(unmarshaler.embed)
	g.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayCreateTokenResponse) MarshalJSON() ([]byte, error) {
	type embed GooglePayCreateTokenResponse
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*g),
		ExpiresAt: internal.NewOptionalDateTime(g.ExpiresAt),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GooglePayCreateTokenResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GooglePayMethodToken struct {
	ProtocolVersion        *string                 `json:"protocolVersion,omitempty" url:"protocolVersion,omitempty"`
	Signature              *string                 `json:"signature,omitempty" url:"signature,omitempty"`
	IntermediateSigningKey *IntermediateSigningKey `json:"intermediateSigningKey,omitempty" url:"intermediateSigningKey,omitempty"`
	SignedMessage          *string                 `json:"signedMessage,omitempty" url:"signedMessage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayMethodToken) GetProtocolVersion() *string {
	if g == nil {
		return nil
	}
	return g.ProtocolVersion
}

func (g *GooglePayMethodToken) GetSignature() *string {
	if g == nil {
		return nil
	}
	return g.Signature
}

func (g *GooglePayMethodToken) GetIntermediateSigningKey() *IntermediateSigningKey {
	if g == nil {
		return nil
	}
	return g.IntermediateSigningKey
}

func (g *GooglePayMethodToken) GetSignedMessage() *string {
	if g == nil {
		return nil
	}
	return g.SignedMessage
}

func (g *GooglePayMethodToken) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayMethodToken) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayMethodToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayMethodToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayMethodToken) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GooglePayToken struct {
	ID             *string                      `json:"id,omitempty" url:"id,omitempty"`
	TenantID       *string                      `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Status         *string                      `json:"status,omitempty" url:"status,omitempty"`
	ExpiresAt      *time.Time                   `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	CreatedBy      *string                      `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt      *time.Time                   `json:"created_at,omitempty" url:"created_at,omitempty"`
	ModifiedBy     *string                      `json:"modified_by,omitempty" url:"modified_by,omitempty"`
	ModifiedAt     *time.Time                   `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Card           *CardDetails                 `json:"card,omitempty" url:"card,omitempty"`
	Data           interface{}                  `json:"data,omitempty" url:"data,omitempty"`
	Authentication *TokenAuthentication         `json:"authentication,omitempty" url:"authentication,omitempty"`
	Details        *TokenServiceProviderDetails `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayToken) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GooglePayToken) GetTenantID() *string {
	if g == nil {
		return nil
	}
	return g.TenantID
}

func (g *GooglePayToken) GetStatus() *string {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GooglePayToken) GetExpiresAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GooglePayToken) GetCreatedBy() *string {
	if g == nil {
		return nil
	}
	return g.CreatedBy
}

func (g *GooglePayToken) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GooglePayToken) GetModifiedBy() *string {
	if g == nil {
		return nil
	}
	return g.ModifiedBy
}

func (g *GooglePayToken) GetModifiedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ModifiedAt
}

func (g *GooglePayToken) GetCard() *CardDetails {
	if g == nil {
		return nil
	}
	return g.Card
}

func (g *GooglePayToken) GetData() interface{} {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GooglePayToken) GetAuthentication() *TokenAuthentication {
	if g == nil {
		return nil
	}
	return g.Authentication
}

func (g *GooglePayToken) GetDetails() *TokenServiceProviderDetails {
	if g == nil {
		return nil
	}
	return g.Details
}

func (g *GooglePayToken) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayToken) UnmarshalJSON(data []byte) error {
	type embed GooglePayToken
	var unmarshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GooglePayToken(unmarshaler.embed)
	g.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayToken) MarshalJSON() ([]byte, error) {
	type embed GooglePayToken
	var marshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*g),
		ExpiresAt:  internal.NewOptionalDateTime(g.ExpiresAt),
		CreatedAt:  internal.NewOptionalDateTime(g.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(g.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GooglePayToken) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type IntermediateSigningKey struct {
	SignedKey  *string  `json:"signedKey,omitempty" url:"signedKey,omitempty"`
	Signatures []string `json:"signatures,omitempty" url:"signatures,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntermediateSigningKey) GetSignedKey() *string {
	if i == nil {
		return nil
	}
	return i.SignedKey
}

func (i *IntermediateSigningKey) GetSignatures() []string {
	if i == nil {
		return nil
	}
	return i.Signatures
}

func (i *IntermediateSigningKey) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntermediateSigningKey) UnmarshalJSON(data []byte) error {
	type unmarshaler IntermediateSigningKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntermediateSigningKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntermediateSigningKey) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type TokenAuthentication struct {
	ThreedsCryptogram *string `json:"threeds_cryptogram,omitempty" url:"threeds_cryptogram,omitempty"`
	EciIndicator      *string `json:"eci_indicator,omitempty" url:"eci_indicator,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenAuthentication) GetThreedsCryptogram() *string {
	if t == nil {
		return nil
	}
	return t.ThreedsCryptogram
}

func (t *TokenAuthentication) GetEciIndicator() *string {
	if t == nil {
		return nil
	}
	return t.EciIndicator
}

func (t *TokenAuthentication) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenAuthentication) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenAuthentication
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenAuthentication(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenAuthentication) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
