// Code generated by Fern. DO NOT EDIT.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
)

type CreateTokenRequest struct {
	ID                    *string            `json:"id,omitempty" url:"-"`
	Type                  *string            `json:"type,omitempty" url:"-"`
	Data                  interface{}        `json:"data,omitempty" url:"-"`
	Encrypted             *string            `json:"encrypted,omitempty" url:"-"`
	Privacy               *Privacy           `json:"privacy,omitempty" url:"-"`
	Metadata              map[string]*string `json:"metadata,omitempty" url:"-"`
	SearchIndexes         []string           `json:"search_indexes,omitempty" url:"-"`
	FingerprintExpression *string            `json:"fingerprint_expression,omitempty" url:"-"`
	Mask                  interface{}        `json:"mask,omitempty" url:"-"`
	DeduplicateToken      *bool              `json:"deduplicate_token,omitempty" url:"-"`
	ExpiresAt             *string            `json:"expires_at,omitempty" url:"-"`
	Containers            []string           `json:"containers,omitempty" url:"-"`
	TokenIntentID         *string            `json:"token_intent_id,omitempty" url:"-"`
}

type TokensListRequest struct {
	ID       []*string          `json:"-" url:"id,omitempty"`
	Metadata map[string]*string `json:"-" url:"metadata,omitempty"`
	Page     *int               `json:"-" url:"page,omitempty"`
	Start    *string            `json:"-" url:"start,omitempty"`
	Size     *int               `json:"-" url:"size,omitempty"`
}

type TokensListV2Request struct {
	Type        *string            `json:"-" url:"type,omitempty"`
	Container   *string            `json:"-" url:"container,omitempty"`
	Fingerprint *string            `json:"-" url:"fingerprint,omitempty"`
	Metadata    map[string]*string `json:"-" url:"metadata,omitempty"`
	Start       *string            `json:"-" url:"start,omitempty"`
	Size        *int               `json:"-" url:"size,omitempty"`
}

type SearchTokensRequestV2 struct {
	Query *string `json:"query,omitempty" url:"-"`
	Start *string `json:"start,omitempty" url:"-"`
	Size  *int    `json:"size,omitempty" url:"-"`
}

type CursorPagination struct {
	PageSize *int    `json:"page_size,omitempty" url:"page_size,omitempty"`
	Next     *string `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CursorPagination) GetPageSize() *int {
	if c == nil {
		return nil
	}
	return c.PageSize
}

func (c *CursorPagination) GetNext() *string {
	if c == nil {
		return nil
	}
	return c.Next
}

func (c *CursorPagination) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CursorPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler CursorPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CursorPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CursorPagination) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type TokenCursorPaginatedList struct {
	Pagination *CursorPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*Token          `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenCursorPaginatedList) GetPagination() *CursorPagination {
	if t == nil {
		return nil
	}
	return t.Pagination
}

func (t *TokenCursorPaginatedList) GetData() []*Token {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TokenCursorPaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenCursorPaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenCursorPaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenCursorPaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenCursorPaginatedList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenPaginatedList struct {
	Pagination *Pagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*Token    `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenPaginatedList) GetPagination() *Pagination {
	if t == nil {
		return nil
	}
	return t.Pagination
}

func (t *TokenPaginatedList) GetData() []*Token {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TokenPaginatedList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenPaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenPaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenPaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenPaginatedList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdatePrivacy struct {
	ImpactLevel       *string `json:"impact_level,omitempty" url:"impact_level,omitempty"`
	RestrictionPolicy *string `json:"restriction_policy,omitempty" url:"restriction_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePrivacy) GetImpactLevel() *string {
	if u == nil {
		return nil
	}
	return u.ImpactLevel
}

func (u *UpdatePrivacy) GetRestrictionPolicy() *string {
	if u == nil {
		return nil
	}
	return u.RestrictionPolicy
}

func (u *UpdatePrivacy) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePrivacy) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePrivacy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePrivacy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePrivacy) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTokenRequest struct {
	Data                  interface{}        `json:"data,omitempty" url:"-"`
	Privacy               *UpdatePrivacy     `json:"privacy,omitempty" url:"-"`
	Metadata              map[string]*string `json:"metadata,omitempty" url:"-"`
	SearchIndexes         []string           `json:"search_indexes,omitempty" url:"-"`
	FingerprintExpression *string            `json:"fingerprint_expression,omitempty" url:"-"`
	Mask                  interface{}        `json:"mask,omitempty" url:"-"`
	ExpiresAt             *string            `json:"expires_at,omitempty" url:"-"`
	DeduplicateToken      *bool              `json:"deduplicate_token,omitempty" url:"-"`
	Containers            []string           `json:"containers,omitempty" url:"-"`
}
