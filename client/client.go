// This file was auto-generated by Fern from our API Definition.

package client

import (
	accountupdaterclient "github.com/Basis-Theory/go-sdk/v2/accountupdater/client"
	applepayclient "github.com/Basis-Theory/go-sdk/v2/applepay/client"
	applicationkeys "github.com/Basis-Theory/go-sdk/v2/applicationkeys"
	applications "github.com/Basis-Theory/go-sdk/v2/applications"
	applicationtemplates "github.com/Basis-Theory/go-sdk/v2/applicationtemplates"
	connectionclient "github.com/Basis-Theory/go-sdk/v2/connection/client"
	core "github.com/Basis-Theory/go-sdk/v2/core"
	documentclient "github.com/Basis-Theory/go-sdk/v2/document/client"
	enrichments "github.com/Basis-Theory/go-sdk/v2/enrichments"
	googlepay "github.com/Basis-Theory/go-sdk/v2/googlepay"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
	keys "github.com/Basis-Theory/go-sdk/v2/keys"
	logs "github.com/Basis-Theory/go-sdk/v2/logs"
	networktokens "github.com/Basis-Theory/go-sdk/v2/networktokens"
	option "github.com/Basis-Theory/go-sdk/v2/option"
	permissions "github.com/Basis-Theory/go-sdk/v2/permissions"
	proxies "github.com/Basis-Theory/go-sdk/v2/proxies"
	reactorsclient "github.com/Basis-Theory/go-sdk/v2/reactors/client"
	roles "github.com/Basis-Theory/go-sdk/v2/roles"
	sessions "github.com/Basis-Theory/go-sdk/v2/sessions"
	tenantsclient "github.com/Basis-Theory/go-sdk/v2/tenants/client"
	threedsclient "github.com/Basis-Theory/go-sdk/v2/threeds/client"
	tokenintents "github.com/Basis-Theory/go-sdk/v2/tokenintents"
	tokens "github.com/Basis-Theory/go-sdk/v2/tokens"
	webhooksclient "github.com/Basis-Theory/go-sdk/v2/webhooks/client"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	Applications         *applications.Client
	ApplicationKeys      *applicationkeys.Client
	ApplicationTemplates *applicationtemplates.Client
	ApplePay             *applepayclient.Client
	Document             *documentclient.Client
	Tokens               *tokens.Client
	Enrichments          *enrichments.Client
	Googlepay            *googlepay.Client
	Keys                 *keys.Client
	Logs                 *logs.Client
	NetworkTokens        *networktokens.Client
	Permissions          *permissions.Client
	Proxies              *proxies.Client
	Reactors             *reactorsclient.Client
	Roles                *roles.Client
	Sessions             *sessions.Client
	TokenIntents         *tokenintents.Client
	Webhooks             *webhooksclient.Client
	AccountUpdater       *accountupdaterclient.Client
	Connection           *connectionclient.Client
	Tenants              *tenantsclient.Client
	Threeds              *threedsclient.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("BT-API-KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:               options.ToHeader(),
		Applications:         applications.NewClient(opts...),
		ApplicationKeys:      applicationkeys.NewClient(opts...),
		ApplicationTemplates: applicationtemplates.NewClient(opts...),
		ApplePay:             applepayclient.NewClient(opts...),
		Document:             documentclient.NewClient(opts...),
		Tokens:               tokens.NewClient(opts...),
		Enrichments:          enrichments.NewClient(opts...),
		Googlepay:            googlepay.NewClient(opts...),
		Keys:                 keys.NewClient(opts...),
		Logs:                 logs.NewClient(opts...),
		NetworkTokens:        networktokens.NewClient(opts...),
		Permissions:          permissions.NewClient(opts...),
		Proxies:              proxies.NewClient(opts...),
		Reactors:             reactorsclient.NewClient(opts...),
		Roles:                roles.NewClient(opts...),
		Sessions:             sessions.NewClient(opts...),
		TokenIntents:         tokenintents.NewClient(opts...),
		Webhooks:             webhooksclient.NewClient(opts...),
		AccountUpdater:       accountupdaterclient.NewClient(opts...),
		Connection:           connectionclient.NewClient(opts...),
		Tenants:              tenantsclient.NewClient(opts...),
		Threeds:              threedsclient.NewClient(opts...),
	}
}
