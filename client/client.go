// This file was auto-generated by Fern from our API Definition.

package client

import (
	applicationkeys "github.com/basis-theory/go-sdk/applicationkeys"
	applications "github.com/basis-theory/go-sdk/applications"
	applicationtemplates "github.com/basis-theory/go-sdk/applicationtemplates"
	core "github.com/basis-theory/go-sdk/core"
	logs "github.com/basis-theory/go-sdk/logs"
	option "github.com/basis-theory/go-sdk/option"
	permissions "github.com/basis-theory/go-sdk/permissions"
	proxies "github.com/basis-theory/go-sdk/proxies"
	reactorformulas "github.com/basis-theory/go-sdk/reactorformulas"
	reactors "github.com/basis-theory/go-sdk/reactors"
	roles "github.com/basis-theory/go-sdk/roles"
	sessions "github.com/basis-theory/go-sdk/sessions"
	tenantsclient "github.com/basis-theory/go-sdk/tenants/client"
	threeds "github.com/basis-theory/go-sdk/threeds"
	tokenize "github.com/basis-theory/go-sdk/tokenize"
	tokens "github.com/basis-theory/go-sdk/tokens"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Applications         *applications.Client
	ApplicationKeys      *applicationkeys.Client
	ApplicationTemplates *applicationtemplates.Client
	Logs                 *logs.Client
	Permissions          *permissions.Client
	Proxies              *proxies.Client
	Reactorformulas      *reactorformulas.Client
	Reactors             *reactors.Client
	Roles                *roles.Client
	Sessions             *sessions.Client
	Threeds              *threeds.Client
	Tokenize             *tokenize.Client
	Tokens               *tokens.Client
	Tenants              *tenantsclient.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("BT-API-KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:               options.ToHeader(),
		Applications:         applications.NewClient(opts...),
		ApplicationKeys:      applicationkeys.NewClient(opts...),
		ApplicationTemplates: applicationtemplates.NewClient(opts...),
		Logs:                 logs.NewClient(opts...),
		Permissions:          permissions.NewClient(opts...),
		Proxies:              proxies.NewClient(opts...),
		Reactorformulas:      reactorformulas.NewClient(opts...),
		Reactors:             reactors.NewClient(opts...),
		Roles:                roles.NewClient(opts...),
		Sessions:             sessions.NewClient(opts...),
		Threeds:              threeds.NewClient(opts...),
		Tokenize:             tokenize.NewClient(opts...),
		Tokens:               tokens.NewClient(opts...),
		Tenants:              tenantsclient.NewClient(opts...),
	}
}
