// Code generated by Fern. DO NOT EDIT.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
	time "time"
)

type LogsListRequest struct {
	EntityType *string    `json:"-" url:"entity_type,omitempty"`
	EntityID   *string    `json:"-" url:"entity_id,omitempty"`
	StartDate  *time.Time `json:"-" url:"start_date,omitempty"`
	EndDate    *time.Time `json:"-" url:"end_date,omitempty"`
	Page       *int       `json:"-" url:"page,omitempty"`
	Start      *string    `json:"-" url:"start,omitempty"`
	Size       *int       `json:"-" url:"size,omitempty"`
}

type Log struct {
	ID         *string    `json:"id,omitempty" url:"id,omitempty"`
	TenantID   *string    `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	ActorID    *string    `json:"actor_id,omitempty" url:"actor_id,omitempty"`
	ActorType  *string    `json:"actor_type,omitempty" url:"actor_type,omitempty"`
	EntityType *string    `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	EntityID   *string    `json:"entity_id,omitempty" url:"entity_id,omitempty"`
	Operation  *string    `json:"operation,omitempty" url:"operation,omitempty"`
	Message    *string    `json:"message,omitempty" url:"message,omitempty"`
	CreatedAt  *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Log) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *Log) GetTenantID() *string {
	if l == nil {
		return nil
	}
	return l.TenantID
}

func (l *Log) GetActorID() *string {
	if l == nil {
		return nil
	}
	return l.ActorID
}

func (l *Log) GetActorType() *string {
	if l == nil {
		return nil
	}
	return l.ActorType
}

func (l *Log) GetEntityType() *string {
	if l == nil {
		return nil
	}
	return l.EntityType
}

func (l *Log) GetEntityID() *string {
	if l == nil {
		return nil
	}
	return l.EntityID
}

func (l *Log) GetOperation() *string {
	if l == nil {
		return nil
	}
	return l.Operation
}

func (l *Log) GetMessage() *string {
	if l == nil {
		return nil
	}
	return l.Message
}

func (l *Log) GetCreatedAt() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAt
}

func (l *Log) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Log) UnmarshalJSON(data []byte) error {
	type embed Log
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = Log(unmarshaler.embed)
	l.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Log) MarshalJSON() ([]byte, error) {
	type embed Log
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*l),
		CreatedAt: internal.NewOptionalDateTime(l.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (l *Log) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LogEntityType struct {
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	Value       *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogEntityType) GetDisplayName() *string {
	if l == nil {
		return nil
	}
	return l.DisplayName
}

func (l *LogEntityType) GetValue() *string {
	if l == nil {
		return nil
	}
	return l.Value
}

func (l *LogEntityType) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogEntityType) UnmarshalJSON(data []byte) error {
	type unmarshaler LogEntityType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogEntityType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogEntityType) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LogPaginatedList struct {
	Pagination *Pagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*Log      `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogPaginatedList) GetPagination() *Pagination {
	if l == nil {
		return nil
	}
	return l.Pagination
}

func (l *LogPaginatedList) GetData() []*Log {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LogPaginatedList) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogPaginatedList) UnmarshalJSON(data []byte) error {
	type unmarshaler LogPaginatedList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogPaginatedList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogPaginatedList) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
