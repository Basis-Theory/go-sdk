// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/v2/internal"
	time "time"
)

type CreateNetworkTokenRequest struct {
	Data           *Card           `json:"data,omitempty" url:"-"`
	TokenID        *string         `json:"token_id,omitempty" url:"-"`
	TokenIntentID  *string         `json:"token_intent_id,omitempty" url:"-"`
	CardholderInfo *CardholderInfo `json:"cardholder_info,omitempty" url:"-"`
}

type Address struct {
	Line1       *string `json:"line1,omitempty" url:"line1,omitempty"`
	Line2       *string `json:"line2,omitempty" url:"line2,omitempty"`
	Line3       *string `json:"line3,omitempty" url:"line3,omitempty"`
	PostalCode  *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	City        *string `json:"city,omitempty" url:"city,omitempty"`
	StateCode   *string `json:"state_code,omitempty" url:"state_code,omitempty"`
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetLine1() *string {
	if a == nil {
		return nil
	}
	return a.Line1
}

func (a *Address) GetLine2() *string {
	if a == nil {
		return nil
	}
	return a.Line2
}

func (a *Address) GetLine3() *string {
	if a == nil {
		return nil
	}
	return a.Line3
}

func (a *Address) GetPostalCode() *string {
	if a == nil {
		return nil
	}
	return a.PostalCode
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetStateCode() *string {
	if a == nil {
		return nil
	}
	return a.StateCode
}

func (a *Address) GetCountryCode() *string {
	if a == nil {
		return nil
	}
	return a.CountryCode
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Card struct {
	Number          *string `json:"number,omitempty" url:"number,omitempty"`
	ExpirationMonth *int    `json:"expiration_month,omitempty" url:"expiration_month,omitempty"`
	ExpirationYear  *int    `json:"expiration_year,omitempty" url:"expiration_year,omitempty"`
	Cvc             *string `json:"cvc,omitempty" url:"cvc,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Card) GetNumber() *string {
	if c == nil {
		return nil
	}
	return c.Number
}

func (c *Card) GetExpirationMonth() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationMonth
}

func (c *Card) GetExpirationYear() *int {
	if c == nil {
		return nil
	}
	return c.ExpirationYear
}

func (c *Card) GetCvc() *string {
	if c == nil {
		return nil
	}
	return c.Cvc
}

func (c *Card) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Card) UnmarshalJSON(data []byte) error {
	type unmarshaler Card
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Card(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Card) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardholderInfo struct {
	Name    *string  `json:"name,omitempty" url:"name,omitempty"`
	Address *Address `json:"address,omitempty" url:"address,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardholderInfo) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CardholderInfo) GetAddress() *Address {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CardholderInfo) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardholderInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler CardholderInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardholderInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardholderInfo) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type NetworkToken struct {
	ID            *string      `json:"id,omitempty" url:"id,omitempty"`
	TenantID      *string      `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	Data          *Card        `json:"data,omitempty" url:"data,omitempty"`
	NetworkToken  *CardDetails `json:"network_token,omitempty" url:"network_token,omitempty"`
	Status        *string      `json:"status,omitempty" url:"status,omitempty"`
	CreatedBy     *string      `json:"created_by,omitempty" url:"created_by,omitempty"`
	CreatedAt     *time.Time   `json:"created_at,omitempty" url:"created_at,omitempty"`
	TokenID       *string      `json:"token_id,omitempty" url:"token_id,omitempty"`
	TokenIntentID *string      `json:"token_intent_id,omitempty" url:"token_intent_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkToken) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NetworkToken) GetTenantID() *string {
	if n == nil {
		return nil
	}
	return n.TenantID
}

func (n *NetworkToken) GetData() *Card {
	if n == nil {
		return nil
	}
	return n.Data
}

func (n *NetworkToken) GetNetworkToken() *CardDetails {
	if n == nil {
		return nil
	}
	return n.NetworkToken
}

func (n *NetworkToken) GetStatus() *string {
	if n == nil {
		return nil
	}
	return n.Status
}

func (n *NetworkToken) GetCreatedBy() *string {
	if n == nil {
		return nil
	}
	return n.CreatedBy
}

func (n *NetworkToken) GetCreatedAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.CreatedAt
}

func (n *NetworkToken) GetTokenID() *string {
	if n == nil {
		return nil
	}
	return n.TokenID
}

func (n *NetworkToken) GetTokenIntentID() *string {
	if n == nil {
		return nil
	}
	return n.TokenIntentID
}

func (n *NetworkToken) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkToken) UnmarshalJSON(data []byte) error {
	type embed NetworkToken
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NetworkToken(unmarshaler.embed)
	n.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkToken) MarshalJSON() ([]byte, error) {
	type embed NetworkToken
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*n),
		CreatedAt: internal.NewOptionalDateTime(n.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (n *NetworkToken) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NetworkTokenCryptogram struct {
	Cryptogram *string `json:"cryptogram,omitempty" url:"cryptogram,omitempty"`
	Eci        *string `json:"eci,omitempty" url:"eci,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkTokenCryptogram) GetCryptogram() *string {
	if n == nil {
		return nil
	}
	return n.Cryptogram
}

func (n *NetworkTokenCryptogram) GetEci() *string {
	if n == nil {
		return nil
	}
	return n.Eci
}

func (n *NetworkTokenCryptogram) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkTokenCryptogram) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkTokenCryptogram
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkTokenCryptogram(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkTokenCryptogram) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}
