// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v3 "github.com/Basis-Theory/go-sdk/v3"
	core "github.com/Basis-Theory/go-sdk/v3/core"
	internal "github.com/Basis-Theory/go-sdk/v3/internal"
	option "github.com/Basis-Theory/go-sdk/v3/option"
	events "github.com/Basis-Theory/go-sdk/v3/webhooks/events"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	Events          *events.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("BT-API-KEY")
	}
	return &Client{
		Events:          events.NewClient(opts...),
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Simple endpoint that can be utilized to verify the application is running
func (c *Client) Ping(
	ctx context.Context,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Ping(
		ctx,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Returns the webhook
func (c *Client) Get(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*v3.Webhook, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Update a new webhook
func (c *Client) Update(
	ctx context.Context,
	id string,
	request *v3.UpdateWebhookRequest,
	opts ...option.RequestOption,
) (*v3.Webhook, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete a new webhook
func (c *Client) Delete(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Returns the configured webhooks
func (c *Client) List(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v3.WebhookList, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Create a new webhook
func (c *Client) Create(
	ctx context.Context,
	request *v3.CreateWebhookRequest,
	opts ...option.RequestOption,
) (*v3.Webhook, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
