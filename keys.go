// This file was auto-generated by Fern from our API Definition.

package basistheory

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Basis-Theory/go-sdk/internal"
	time "time"
)

type ClientEncryptionKeyRequest struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"-"`
}

func (c *ClientEncryptionKeyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientEncryptionKeyRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = ClientEncryptionKeyRequest(body)
	return nil
}

func (c *ClientEncryptionKeyRequest) MarshalJSON() ([]byte, error) {
	type embed ClientEncryptionKeyRequest
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type ClientEncryptionKeyMetadataResponse struct {
	ID        *string    `json:"id,omitempty" url:"id,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientEncryptionKeyMetadataResponse) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ClientEncryptionKeyMetadataResponse) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *ClientEncryptionKeyMetadataResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientEncryptionKeyMetadataResponse) UnmarshalJSON(data []byte) error {
	type embed ClientEncryptionKeyMetadataResponse
	var unmarshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientEncryptionKeyMetadataResponse(unmarshaler.embed)
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientEncryptionKeyMetadataResponse) MarshalJSON() ([]byte, error) {
	type embed ClientEncryptionKeyMetadataResponse
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientEncryptionKeyMetadataResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientEncryptionKeyResponse struct {
	ID           *string    `json:"id,omitempty" url:"id,omitempty"`
	PublicKeyPem *string    `json:"publicKeyPEM,omitempty" url:"publicKeyPEM,omitempty"`
	ExpiresAt    *time.Time `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientEncryptionKeyResponse) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ClientEncryptionKeyResponse) GetPublicKeyPem() *string {
	if c == nil {
		return nil
	}
	return c.PublicKeyPem
}

func (c *ClientEncryptionKeyResponse) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *ClientEncryptionKeyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientEncryptionKeyResponse) UnmarshalJSON(data []byte) error {
	type embed ClientEncryptionKeyResponse
	var unmarshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientEncryptionKeyResponse(unmarshaler.embed)
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientEncryptionKeyResponse) MarshalJSON() ([]byte, error) {
	type embed ClientEncryptionKeyResponse
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expiresAt,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientEncryptionKeyResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
